
# cmp_parse_tab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "translation_unitright-right~right+ARRAY_DIV ARRAY_MUL ARRAY_POW ARRAY_RDIV BREAK CLEAR CONSTANT ELSE ELSEIF END EQ_OP FOR FUNCTION GE_OP GLOBAL IDENTIFIER IF LE_OP NEWLINE NE_OP RETURN STRING_LITERAL TRANSPOSE WHILE\n        primary_expression : identifier_expression\n                           | constant_expression\n                           | string_literal_expression\n                           | '(' expression ')'\n                           | '[' ']'\n                           | '[' array_list ']'\n        \n        identifier_expression : IDENTIFIER\n        \n        constant_expression : CONSTANT\n        \n        string_literal_expression : STRING_LITERAL\n        \n        postfix_expression : primary_expression\n                           | array_expression\n                           | postfix_expression TRANSPOSE\n        \n        index_expression : ':'\n                         | expression\n        \n        index_expression_list : index_expression\n                              | index_expression_list ',' index_expression\n        \n        array_expression : IDENTIFIER '(' index_expression_list ')'\n        \n        unary_expression : postfix_expression\n                         | unary_operator postfix_expression\n        \n        unary_operator : '+'\n                       | '-'\n                       | '~'\n        \n        multiplicative_expression : unary_expression\n                                  | multiplicative_expression '*' unary_expression\n                                  | multiplicative_expression '/' unary_expression\n                                  | multiplicative_expression '^' unary_expression\n                                  | multiplicative_expression ARRAY_MUL unary_expression\n                                  | multiplicative_expression ARRAY_DIV unary_expression\n                                  | multiplicative_expression ARRAY_RDIV unary_expression\n                                  | multiplicative_expression ARRAY_POW unary_expression\n        \n        additive_expression : multiplicative_expression\n                            | additive_expression '+' multiplicative_expression\n                            | additive_expression '-' multiplicative_expression\n        \n        relational_expression : additive_expression\n                              | relational_expression '<' additive_expression\n                              | relational_expression '>' additive_expression\n                              | relational_expression LE_OP additive_expression\n                              | relational_expression GE_OP additive_expression\n        \n        equality_expression : relational_expression\n                            | equality_expression EQ_OP relational_expression\n                            | equality_expression NE_OP relational_expression\n        \n        and_expression : equality_expression\n                       | and_expression '&' equality_expression\n        \n        or_expression : and_expression\n                      | or_expression '|' and_expression\n        \n        expression : or_expression\n                   | expression ':' or_expression\n        \n        assignment_expression : postfix_expression '=' expression\n        \n        eostmt : ','\n               | ';'\n               | NEWLINE\n        \n        statement : global_statement\n                  | clear_statement\n                  | assignment_statement\n                  | expression_statement\n                  | selection_statement\n                  | iteration_statement\n                  | jump_statement\n                  | func_statement\n        \n        statement_list : statement\n                       | statement_list statement\n        \n        identifier_list : IDENTIFIER\n                        | identifier_list IDENTIFIER\n        \n        global_statement : GLOBAL identifier_list eostmt\n        \n        clear_statement : CLEAR identifier_list eostmt\n        \n        expression_statement : eostmt\n                             | expression eostmt\n        \n        assignment_statement : assignment_expression eostmt\n        \n        array_element : expression\n                      | expression_statement\n        \n        array_list : array_element\n                   | array_list array_element\n        \n        selection_statement : IF expression statement_list END eostmt\n                            | IF expression statement_list ELSE statement_list END eostmt\n                            | IF expression statement_list elseif_clause END eostmt\n                            | IF expression statement_list elseif_clause ELSE statement_list END eostmt\n        \n        elseif_clause : ELSEIF expression statement_list\n                      | elseif_clause ELSEIF expression statement_list\n        \n        iteration_statement : WHILE expression statement_list END eostmt\n                            | FOR IDENTIFIER '=' expression statement_list END eostmt\n                            | FOR '(' IDENTIFIER '=' expression ')' statement_list END eostmt\n        \n        jump_statement : BREAK eostmt\n                       | RETURN eostmt\n        \n        translation_unit : statement_list\n        \n        func_identifier_list : IDENTIFIER\n                             | func_identifier_list ',' IDENTIFIER\n        \n        func_return_list : IDENTIFIER\n                         | '[' func_identifier_list ']'\n        \n        func_declare_lhs : IDENTIFIER\n                         | IDENTIFIER '(' ')'\n                         | IDENTIFIER '(' func_identifier_list ')'\n        \n        func_declare : func_declare_lhs\n                     | func_return_list '=' func_declare_lhs\n        \n        func_statement : FUNCTION func_declare eostmt statement_list END\n        "
    
_lr_action_items = {'GLOBAL':([0,2,3,4,5,6,7,8,9,10,11,13,20,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,45,48,52,53,55,56,57,62,63,70,73,93,94,96,97,98,99,106,107,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,137,139,141,148,149,151,153,154,155,158,162,163,164,165,167,168,170,171,172,173,175,],[12,12,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-61,-68,-67,12,-18,12,-82,-83,-12,-5,-19,-64,-65,-47,12,12,-4,12,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,12,12,-17,12,-73,12,12,12,-79,12,-94,-75,12,12,12,12,-74,12,-80,12,-76,-81,]),'CLEAR':([0,2,3,4,5,6,7,8,9,10,11,13,20,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,45,48,52,53,55,56,57,62,63,70,73,93,94,96,97,98,99,106,107,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,137,139,141,148,149,151,153,154,155,158,162,163,164,165,167,168,170,171,172,173,175,],[14,14,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-61,-68,-67,14,-18,14,-82,-83,-12,-5,-19,-64,-65,-47,14,14,-4,14,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,14,14,-17,14,-73,14,14,14,-79,14,-94,-75,14,14,14,14,-74,14,-80,14,-76,-81,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,13,20,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,45,48,52,53,55,56,57,62,63,70,73,93,94,96,97,98,99,106,107,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,137,139,141,148,149,151,153,154,155,158,162,163,164,165,167,168,170,171,172,173,175,],[17,17,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-61,-68,-67,17,-18,17,-82,-83,-12,-5,-19,-64,-65,-47,17,17,-4,17,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,17,17,-17,17,-73,17,17,17,-79,17,-94,-75,17,17,17,17,-74,17,-80,17,-76,-81,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,13,20,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,45,48,52,53,55,56,57,62,63,70,73,93,94,96,97,98,99,106,107,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,137,139,141,148,149,151,153,154,155,158,162,163,164,165,167,168,170,171,172,173,175,],[18,18,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-61,-68,-67,18,-18,18,-82,-83,-12,-5,-19,-64,-65,-47,18,18,-4,18,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,18,18,-17,18,-73,18,18,18,-79,18,-94,-75,18,18,18,18,-74,18,-80,18,-76,-81,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,13,20,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,45,48,52,53,55,56,57,62,63,70,73,93,94,96,97,98,99,106,107,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,137,139,141,148,149,151,153,154,155,158,162,163,164,165,167,168,170,171,172,173,175,],[19,19,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-61,-68,-67,19,-18,19,-82,-83,-12,-5,-19,-64,-65,-47,19,19,-4,19,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,19,19,-17,19,-73,19,19,19,-79,19,-94,-75,19,19,19,19,-74,19,-80,19,-76,-81,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,13,20,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,45,48,52,53,55,56,57,62,63,70,73,93,94,96,97,98,99,106,107,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,137,139,141,148,149,151,153,154,155,158,162,163,164,165,167,168,170,171,172,173,175,],[22,22,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-61,-68,-67,22,-18,22,-82,-83,-12,-5,-19,-64,-65,-47,22,22,-4,22,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,22,22,-17,22,-73,22,22,22,-79,22,-94,-75,22,22,22,22,-74,22,-80,22,-76,-81,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,13,20,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,45,48,52,53,55,56,57,62,63,70,73,93,94,96,97,98,99,106,107,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,137,139,141,148,149,151,153,154,155,158,162,163,164,165,167,168,170,171,172,173,175,],[23,23,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-61,-68,-67,23,-18,23,-82,-83,-12,-5,-19,-64,-65,-47,23,23,-4,23,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,23,23,-17,23,-73,23,23,23,-79,23,-94,-75,23,23,23,23,-74,23,-80,23,-76,-81,]),'FUNCTION':([0,2,3,4,5,6,7,8,9,10,11,13,20,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,45,48,52,53,55,56,57,62,63,70,73,93,94,96,97,98,99,106,107,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,137,139,141,148,149,151,153,154,155,158,162,163,164,165,167,168,170,171,172,173,175,],[24,24,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-61,-68,-67,24,-18,24,-82,-83,-12,-5,-19,-64,-65,-47,24,24,-4,24,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,24,24,-17,24,-73,24,24,24,-79,24,-94,-75,24,24,24,24,-74,24,-80,24,-76,-81,]),',':([0,2,3,4,5,6,7,8,9,10,11,13,15,16,20,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,48,49,50,51,52,53,55,56,57,62,63,64,65,67,70,73,74,75,76,77,93,94,95,96,97,98,99,102,103,104,105,106,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,137,139,141,142,143,144,145,148,149,150,151,153,154,155,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,],[26,26,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,26,26,-7,26,26,-18,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,26,-42,-8,-9,-39,-34,-31,-23,-61,26,-62,26,-68,-67,26,-18,26,-82,-83,26,-92,-89,-12,-5,26,-71,26,-70,-19,-64,-63,-65,-47,26,26,140,-15,-13,-14,-4,26,147,-85,-48,-45,-43,-6,-72,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,26,26,26,26,-17,26,-93,-89,-90,147,-73,26,26,26,26,-79,26,-16,-94,-91,-86,26,-75,26,26,26,26,26,-74,26,26,-80,26,-76,26,-81,]),';':([0,2,3,4,5,6,7,8,9,10,11,13,15,16,20,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,48,49,50,51,52,53,55,56,57,62,63,64,65,67,70,73,74,75,76,77,93,94,95,96,97,98,99,106,107,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,137,139,141,142,143,144,148,149,150,151,153,154,155,158,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,],[27,27,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,27,27,-7,27,27,-18,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,27,-42,-8,-9,-39,-34,-31,-23,-61,27,-62,27,-68,-67,27,-18,27,-82,-83,27,-92,-89,-12,-5,27,-71,27,-70,-19,-64,-63,-65,-47,27,27,-4,27,-48,-45,-43,-6,-72,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,27,27,27,27,-17,27,-93,-89,-90,-73,27,27,27,27,-79,27,-94,-91,27,-75,27,27,27,27,27,-74,27,27,-80,27,-76,27,-81,]),'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,13,15,16,20,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,48,49,50,51,52,53,55,56,57,62,63,64,65,67,70,73,74,75,76,77,93,94,95,96,97,98,99,106,107,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,137,139,141,142,143,144,148,149,150,151,153,154,155,158,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,],[28,28,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,28,28,-7,28,28,-18,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,28,-42,-8,-9,-39,-34,-31,-23,-61,28,-62,28,-68,-67,28,-18,28,-82,-83,28,-92,-89,-12,-5,28,-71,28,-70,-19,-64,-63,-65,-47,28,28,-4,28,-48,-45,-43,-6,-72,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,28,28,28,28,-17,28,-93,-89,-90,-73,28,28,28,28,-79,28,-94,-91,28,-75,28,28,28,28,28,-74,28,28,-80,28,-76,28,-81,]),'(':([0,2,3,4,5,6,7,8,9,10,11,13,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,53,54,55,56,57,60,62,63,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,106,107,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,135,137,138,139,140,141,143,148,149,151,152,153,154,155,158,162,163,164,165,167,168,170,171,172,173,175,],[21,21,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,21,21,59,60,21,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,21,-42,-8,-9,-39,-34,-31,-20,-21,-23,21,-22,-61,-68,-67,21,21,-18,21,21,-82,-83,109,21,-12,21,21,-5,21,-71,-69,-70,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-19,-64,-65,-47,21,21,21,-4,21,-45,-43,-6,-72,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,21,21,21,21,-17,21,21,109,-73,21,21,21,21,-79,21,-94,-75,21,21,21,21,-74,21,-80,21,-76,-81,]),'[':([0,2,3,4,5,6,7,8,9,10,11,13,17,18,20,21,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,53,54,55,56,57,60,62,63,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,106,107,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,135,137,138,139,140,141,148,149,151,152,153,154,155,158,162,163,164,165,167,168,170,171,172,173,175,],[36,36,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,36,36,-7,36,68,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,36,-42,-8,-9,-39,-34,-31,-20,-21,-23,36,-22,-61,-68,-67,36,36,-18,36,36,-82,-83,36,-12,36,36,-5,36,-71,-69,-70,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-19,-64,-65,-47,36,36,36,-4,36,-45,-43,-6,-72,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,36,36,36,36,-17,36,36,-73,36,36,36,36,-79,36,-94,-75,36,36,36,36,-74,36,-80,36,-76,-81,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,62,63,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,106,107,108,109,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,135,137,138,139,140,141,147,148,149,151,152,153,154,155,158,162,163,164,165,167,168,170,171,172,173,175,],[20,20,-60,-52,-53,-54,-55,-56,-57,-58,-59,50,-66,50,20,20,58,-7,20,67,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,20,-42,-8,-9,-39,-34,-31,-20,-21,-23,20,-22,-61,95,-62,95,-68,-67,20,20,-18,20,101,20,-82,-83,111,20,-12,20,20,-5,20,-71,-69,-70,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-19,-64,-63,-65,-47,20,20,20,-4,20,143,111,-45,-43,-6,-72,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,20,20,20,20,-17,20,20,160,-73,20,20,20,20,-79,20,-94,-75,20,20,20,20,-74,20,-80,20,-76,-81,]),'CONSTANT':([0,2,3,4,5,6,7,8,9,10,11,13,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,53,54,55,56,57,60,62,63,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,106,107,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,135,137,138,139,140,141,148,149,151,152,153,154,155,158,162,163,164,165,167,168,170,171,172,173,175,],[38,38,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,38,38,-7,38,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,38,-42,-8,-9,-39,-34,-31,-20,-21,-23,38,-22,-61,-68,-67,38,38,-18,38,38,-82,-83,38,-12,38,38,-5,38,-71,-69,-70,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-19,-64,-65,-47,38,38,38,-4,38,-45,-43,-6,-72,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,38,38,38,38,-17,38,38,-73,38,38,38,38,-79,38,-94,-75,38,38,38,38,-74,38,-80,38,-76,-81,]),'STRING_LITERAL':([0,2,3,4,5,6,7,8,9,10,11,13,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,53,54,55,56,57,60,62,63,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,106,107,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,135,137,138,139,140,141,148,149,151,152,153,154,155,158,162,163,164,165,167,168,170,171,172,173,175,],[39,39,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,39,39,-7,39,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,39,-42,-8,-9,-39,-34,-31,-20,-21,-23,39,-22,-61,-68,-67,39,39,-18,39,39,-82,-83,39,-12,39,39,-5,39,-71,-69,-70,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-19,-64,-65,-47,39,39,39,-4,39,-45,-43,-6,-72,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,39,39,39,39,-17,39,39,-73,39,39,39,39,-79,39,-94,-75,39,39,39,39,-74,39,-80,39,-76,-81,]),'+':([0,2,3,4,5,6,7,8,9,10,11,13,17,18,20,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,48,52,53,54,55,56,57,60,62,63,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,106,107,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,135,137,138,139,140,141,148,149,151,152,153,154,155,158,162,163,164,165,167,168,170,171,172,173,175,],[43,43,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,43,43,-7,43,-18,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,43,-42,-8,-9,-39,84,-31,-23,-61,-68,-67,43,43,-18,43,43,-82,-83,43,-12,43,43,-5,43,-71,-69,-70,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-19,-64,-65,-47,43,43,43,-4,43,-45,-43,-6,-72,-40,-41,84,84,84,84,-32,-33,-24,-25,-26,-27,-28,-29,-30,43,43,43,43,-17,43,43,-73,43,43,43,43,-79,43,-94,-75,43,43,43,43,-74,43,-80,43,-76,-81,]),'-':([0,2,3,4,5,6,7,8,9,10,11,13,17,18,20,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,48,52,53,54,55,56,57,60,62,63,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,106,107,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,135,137,138,139,140,141,148,149,151,152,153,154,155,158,162,163,164,165,167,168,170,171,172,173,175,],[44,44,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,44,44,-7,44,-18,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,44,-42,-8,-9,-39,85,-31,-23,-61,-68,-67,44,44,-18,44,44,-82,-83,44,-12,44,44,-5,44,-71,-69,-70,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-19,-64,-65,-47,44,44,44,-4,44,-45,-43,-6,-72,-40,-41,85,85,85,85,-32,-33,-24,-25,-26,-27,-28,-29,-30,44,44,44,44,-17,44,44,-73,44,44,44,44,-79,44,-94,-75,44,44,44,44,-74,44,-80,44,-76,-81,]),'~':([0,2,3,4,5,6,7,8,9,10,11,13,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,48,52,53,54,55,56,57,60,62,63,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,106,107,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,135,137,138,139,140,141,148,149,151,152,153,154,155,158,162,163,164,165,167,168,170,171,172,173,175,],[47,47,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,47,47,-7,47,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,47,-42,-8,-9,-39,-34,-31,-23,-61,-68,-67,47,47,-18,47,47,-82,-83,47,-12,47,47,-5,47,-71,-69,-70,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-19,-64,-65,-47,47,47,47,-4,47,-45,-43,-6,-72,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,47,47,47,47,-17,47,47,-73,47,47,47,47,-79,47,-94,-75,47,47,47,47,-74,47,-80,47,-76,-81,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,13,26,27,28,48,52,53,62,63,94,96,148,154,158,162,168,171,173,175,],[0,-84,-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,-49,-50,-51,-61,-68,-67,-82,-83,-64,-65,-73,-79,-94,-75,-74,-80,-76,-81,]),'END':([3,4,5,6,7,8,9,10,11,13,26,27,28,48,52,53,62,63,94,96,98,99,134,141,148,149,154,155,158,162,163,165,168,170,171,172,173,175,],[-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,-49,-50,-51,-61,-68,-67,-82,-83,-64,-65,132,136,150,158,-73,161,-79,166,-94,-75,169,-77,-74,-78,-80,174,-76,-81,]),'ELSE':([3,4,5,6,7,8,9,10,11,13,26,27,28,48,52,53,62,63,94,96,98,134,148,154,158,162,165,168,170,171,173,175,],[-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,-49,-50,-51,-61,-68,-67,-82,-83,-64,-65,133,151,-73,-79,-94,-75,-77,-74,-78,-80,-76,-81,]),'ELSEIF':([3,4,5,6,7,8,9,10,11,13,26,27,28,48,52,53,62,63,94,96,98,134,148,154,158,162,165,168,170,171,173,175,],[-60,-52,-53,-54,-55,-56,-57,-58,-59,-66,-49,-50,-51,-61,-68,-67,-82,-83,-64,-65,135,152,-73,-79,-94,-75,-77,-74,-78,-80,-76,-81,]),']':([13,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,53,56,70,73,74,75,76,77,93,97,106,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,160,],[-66,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,73,-42,-8,-9,-39,-34,-31,-23,-67,-18,-12,-5,115,-71,-69,-70,-19,-47,-4,146,-85,-45,-43,-6,-72,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,-86,]),':':([16,20,25,29,30,31,32,33,34,35,37,38,39,40,41,42,45,55,56,57,60,61,70,73,76,93,97,105,106,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,137,139,140,153,156,164,],[54,-7,-18,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,54,-18,54,104,54,-12,-5,54,-19,-47,54,-4,54,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,54,-17,104,54,54,54,]),'=':([20,25,30,31,33,34,35,38,39,58,66,67,70,73,101,106,115,139,146,],[-7,69,-10,-11,-1,-2,-3,-8,-9,100,108,-87,-12,-5,138,-4,-6,-17,-88,]),'TRANSPOSE':([20,25,30,31,33,34,35,38,39,56,70,73,93,106,115,139,],[-7,70,-10,-11,-1,-2,-3,-8,-9,70,-12,-5,70,-4,-6,-17,]),'*':([20,25,30,31,33,34,35,38,39,42,45,56,70,73,93,106,115,123,124,125,126,127,128,129,130,131,139,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,86,-23,-18,-12,-5,-19,-4,-6,86,86,-24,-25,-26,-27,-28,-29,-30,-17,]),'/':([20,25,30,31,33,34,35,38,39,42,45,56,70,73,93,106,115,123,124,125,126,127,128,129,130,131,139,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,87,-23,-18,-12,-5,-19,-4,-6,87,87,-24,-25,-26,-27,-28,-29,-30,-17,]),'^':([20,25,30,31,33,34,35,38,39,42,45,56,70,73,93,106,115,123,124,125,126,127,128,129,130,131,139,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,88,-23,-18,-12,-5,-19,-4,-6,88,88,-24,-25,-26,-27,-28,-29,-30,-17,]),'ARRAY_MUL':([20,25,30,31,33,34,35,38,39,42,45,56,70,73,93,106,115,123,124,125,126,127,128,129,130,131,139,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,89,-23,-18,-12,-5,-19,-4,-6,89,89,-24,-25,-26,-27,-28,-29,-30,-17,]),'ARRAY_DIV':([20,25,30,31,33,34,35,38,39,42,45,56,70,73,93,106,115,123,124,125,126,127,128,129,130,131,139,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,90,-23,-18,-12,-5,-19,-4,-6,90,90,-24,-25,-26,-27,-28,-29,-30,-17,]),'ARRAY_RDIV':([20,25,30,31,33,34,35,38,39,42,45,56,70,73,93,106,115,123,124,125,126,127,128,129,130,131,139,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,91,-23,-18,-12,-5,-19,-4,-6,91,91,-24,-25,-26,-27,-28,-29,-30,-17,]),'ARRAY_POW':([20,25,30,31,33,34,35,38,39,42,45,56,70,73,93,106,115,123,124,125,126,127,128,129,130,131,139,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,92,-23,-18,-12,-5,-19,-4,-6,92,92,-24,-25,-26,-27,-28,-29,-30,-17,]),'<':([20,25,30,31,33,34,35,38,39,40,41,42,45,56,70,73,93,106,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,80,-34,-31,-23,-18,-12,-5,-19,-4,-6,80,80,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'>':([20,25,30,31,33,34,35,38,39,40,41,42,45,56,70,73,93,106,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,81,-34,-31,-23,-18,-12,-5,-19,-4,-6,81,81,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'LE_OP':([20,25,30,31,33,34,35,38,39,40,41,42,45,56,70,73,93,106,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,82,-34,-31,-23,-18,-12,-5,-19,-4,-6,82,82,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'GE_OP':([20,25,30,31,33,34,35,38,39,40,41,42,45,56,70,73,93,106,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,83,-34,-31,-23,-18,-12,-5,-19,-4,-6,83,83,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'EQ_OP':([20,25,30,31,33,34,35,37,38,39,40,41,42,45,56,70,73,93,106,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,],[-7,-18,-10,-11,-1,-2,-3,78,-8,-9,-39,-34,-31,-23,-18,-12,-5,-19,-4,78,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'NE_OP':([20,25,30,31,33,34,35,37,38,39,40,41,42,45,56,70,73,93,106,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,],[-7,-18,-10,-11,-1,-2,-3,79,-8,-9,-39,-34,-31,-23,-18,-12,-5,-19,-4,79,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'&':([20,25,30,31,32,33,34,35,37,38,39,40,41,42,45,56,70,73,93,106,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,],[-7,-18,-10,-11,72,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-18,-12,-5,-19,-4,72,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'|':([20,25,29,30,31,32,33,34,35,37,38,39,40,41,42,45,56,70,73,93,97,106,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,],[-7,-18,71,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-18,-12,-5,-19,71,-4,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),')':([20,29,30,31,32,33,34,35,37,38,39,40,41,42,45,56,61,70,73,93,97,102,103,104,105,106,109,111,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,145,156,157,160,],[-7,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-18,106,-12,-5,-19,-47,139,-15,-13,-14,-4,144,-85,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,159,167,-16,-86,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'statement_list':([0,55,57,107,133,137,151,153,164,167,],[2,98,99,141,149,155,163,165,170,172,]),'statement':([0,2,55,57,98,99,107,133,137,141,149,151,153,155,163,164,165,167,170,172,],[3,48,3,3,48,48,3,3,3,48,48,3,3,48,48,3,48,3,48,48,]),'global_statement':([0,2,55,57,98,99,107,133,137,141,149,151,153,155,163,164,165,167,170,172,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'clear_statement':([0,2,55,57,98,99,107,133,137,141,149,151,153,155,163,164,165,167,170,172,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'assignment_statement':([0,2,55,57,98,99,107,133,137,141,149,151,153,155,163,164,165,167,170,172,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'expression_statement':([0,2,36,55,57,74,98,99,107,133,137,141,149,151,153,155,163,164,165,167,170,172,],[7,7,77,7,7,77,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'selection_statement':([0,2,55,57,98,99,107,133,137,141,149,151,153,155,163,164,165,167,170,172,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'iteration_statement':([0,2,55,57,98,99,107,133,137,141,149,151,153,155,163,164,165,167,170,172,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'jump_statement':([0,2,55,57,98,99,107,133,137,141,149,151,153,155,163,164,165,167,170,172,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'func_statement':([0,2,55,57,98,99,107,133,137,141,149,151,153,155,163,164,165,167,170,172,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'eostmt':([0,2,15,16,22,23,36,49,51,55,57,64,74,76,98,99,107,132,133,136,137,141,149,150,151,153,155,161,163,164,165,166,167,169,170,172,174,],[13,13,52,53,62,63,13,94,96,13,13,107,13,53,13,13,13,148,13,154,13,13,13,162,13,13,13,168,13,13,13,171,13,173,13,13,175,]),'assignment_expression':([0,2,55,57,98,99,107,133,137,141,149,151,153,155,163,164,165,167,170,172,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'expression':([0,2,17,18,21,36,55,57,60,69,74,98,99,100,107,133,135,137,138,140,141,149,151,152,153,155,163,164,165,167,170,172,],[16,16,55,57,61,76,16,16,105,112,76,16,16,137,16,16,153,16,156,105,16,16,16,164,16,16,16,16,16,16,16,16,]),'postfix_expression':([0,2,17,18,21,36,46,54,55,57,60,69,71,72,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,98,99,100,107,133,135,137,138,140,141,149,151,152,153,155,163,164,165,167,170,172,],[25,25,56,56,56,56,93,56,25,25,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,25,25,56,25,25,56,25,56,56,25,25,25,56,25,25,25,25,25,25,25,25,]),'or_expression':([0,2,17,18,21,36,54,55,57,60,69,74,98,99,100,107,133,135,137,138,140,141,149,151,152,153,155,163,164,165,167,170,172,],[29,29,29,29,29,29,97,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'primary_expression':([0,2,17,18,21,36,46,54,55,57,60,69,71,72,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,98,99,100,107,133,135,137,138,140,141,149,151,152,153,155,163,164,165,167,170,172,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'array_expression':([0,2,17,18,21,36,46,54,55,57,60,69,71,72,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,98,99,100,107,133,135,137,138,140,141,149,151,152,153,155,163,164,165,167,170,172,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'and_expression':([0,2,17,18,21,36,54,55,57,60,69,71,74,98,99,100,107,133,135,137,138,140,141,149,151,152,153,155,163,164,165,167,170,172,],[32,32,32,32,32,32,32,32,32,32,32,113,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'identifier_expression':([0,2,17,18,21,36,46,54,55,57,60,69,71,72,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,98,99,100,107,133,135,137,138,140,141,149,151,152,153,155,163,164,165,167,170,172,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'constant_expression':([0,2,17,18,21,36,46,54,55,57,60,69,71,72,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,98,99,100,107,133,135,137,138,140,141,149,151,152,153,155,163,164,165,167,170,172,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'string_literal_expression':([0,2,17,18,21,36,46,54,55,57,60,69,71,72,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,98,99,100,107,133,135,137,138,140,141,149,151,152,153,155,163,164,165,167,170,172,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'equality_expression':([0,2,17,18,21,36,54,55,57,60,69,71,72,74,98,99,100,107,133,135,137,138,140,141,149,151,152,153,155,163,164,165,167,170,172,],[37,37,37,37,37,37,37,37,37,37,37,37,114,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'relational_expression':([0,2,17,18,21,36,54,55,57,60,69,71,72,74,78,79,98,99,100,107,133,135,137,138,140,141,149,151,152,153,155,163,164,165,167,170,172,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,117,118,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'additive_expression':([0,2,17,18,21,36,54,55,57,60,69,71,72,74,78,79,80,81,82,83,98,99,100,107,133,135,137,138,140,141,149,151,152,153,155,163,164,165,167,170,172,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,119,120,121,122,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'multiplicative_expression':([0,2,17,18,21,36,54,55,57,60,69,71,72,74,78,79,80,81,82,83,84,85,98,99,100,107,133,135,137,138,140,141,149,151,152,153,155,163,164,165,167,170,172,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,123,124,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'unary_expression':([0,2,17,18,21,36,54,55,57,60,69,71,72,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,98,99,100,107,133,135,137,138,140,141,149,151,152,153,155,163,164,165,167,170,172,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,125,126,127,128,129,130,131,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'unary_operator':([0,2,17,18,21,36,54,55,57,60,69,71,72,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,98,99,100,107,133,135,137,138,140,141,149,151,152,153,155,163,164,165,167,170,172,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'identifier_list':([12,14,],[49,51,]),'func_declare':([24,],[64,]),'func_declare_lhs':([24,108,],[65,142,]),'func_return_list':([24,],[66,]),'array_list':([36,],[74,]),'array_element':([36,74,],[75,116,]),'index_expression_list':([60,],[102,]),'index_expression':([60,140,],[103,157,]),'func_identifier_list':([68,109,],[110,145,]),'elseif_clause':([98,],[134,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('primary_expression -> identifier_expression','primary_expression',1,'p_primary_expression','parser.py',93),
  ('primary_expression -> constant_expression','primary_expression',1,'p_primary_expression','parser.py',94),
  ('primary_expression -> string_literal_expression','primary_expression',1,'p_primary_expression','parser.py',95),
  ('primary_expression -> ( expression )','primary_expression',3,'p_primary_expression','parser.py',96),
  ('primary_expression -> [ ]','primary_expression',2,'p_primary_expression','parser.py',97),
  ('primary_expression -> [ array_list ]','primary_expression',3,'p_primary_expression','parser.py',98),
  ('identifier_expression -> IDENTIFIER','identifier_expression',1,'p_identifier_expression','parser.py',112),
  ('constant_expression -> CONSTANT','constant_expression',1,'p_constant_expression','parser.py',118),
  ('string_literal_expression -> STRING_LITERAL','string_literal_expression',1,'p_string_literal_expression','parser.py',124),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser.py',130),
  ('postfix_expression -> array_expression','postfix_expression',1,'p_postfix_expression','parser.py',131),
  ('postfix_expression -> postfix_expression TRANSPOSE','postfix_expression',2,'p_postfix_expression','parser.py',132),
  ('index_expression -> :','index_expression',1,'p_index_expression','parser.py',138),
  ('index_expression -> expression','index_expression',1,'p_index_expression','parser.py',139),
  ('index_expression_list -> index_expression','index_expression_list',1,'p_index_expression_list','parser.py',145),
  ('index_expression_list -> index_expression_list , index_expression','index_expression_list',3,'p_index_expression_list','parser.py',146),
  ('array_expression -> IDENTIFIER ( index_expression_list )','array_expression',4,'p_array_expression','parser.py',152),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',158),
  ('unary_expression -> unary_operator postfix_expression','unary_expression',2,'p_unary_expression','parser.py',159),
  ('unary_operator -> +','unary_operator',1,'p_unary_operator','parser.py',165),
  ('unary_operator -> -','unary_operator',1,'p_unary_operator','parser.py',166),
  ('unary_operator -> ~','unary_operator',1,'p_unary_operator','parser.py',167),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','parser.py',173),
  ('multiplicative_expression -> multiplicative_expression * unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',174),
  ('multiplicative_expression -> multiplicative_expression / unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',175),
  ('multiplicative_expression -> multiplicative_expression ^ unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',176),
  ('multiplicative_expression -> multiplicative_expression ARRAY_MUL unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',177),
  ('multiplicative_expression -> multiplicative_expression ARRAY_DIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',178),
  ('multiplicative_expression -> multiplicative_expression ARRAY_RDIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',179),
  ('multiplicative_expression -> multiplicative_expression ARRAY_POW unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',180),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','parser.py',186),
  ('additive_expression -> additive_expression + multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',187),
  ('additive_expression -> additive_expression - multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',188),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression','parser.py',194),
  ('relational_expression -> relational_expression < additive_expression','relational_expression',3,'p_relational_expression','parser.py',195),
  ('relational_expression -> relational_expression > additive_expression','relational_expression',3,'p_relational_expression','parser.py',196),
  ('relational_expression -> relational_expression LE_OP additive_expression','relational_expression',3,'p_relational_expression','parser.py',197),
  ('relational_expression -> relational_expression GE_OP additive_expression','relational_expression',3,'p_relational_expression','parser.py',198),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','parser.py',204),
  ('equality_expression -> equality_expression EQ_OP relational_expression','equality_expression',3,'p_equality_expression','parser.py',205),
  ('equality_expression -> equality_expression NE_OP relational_expression','equality_expression',3,'p_equality_expression','parser.py',206),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','parser.py',212),
  ('and_expression -> and_expression & equality_expression','and_expression',3,'p_and_expression','parser.py',213),
  ('or_expression -> and_expression','or_expression',1,'p_or_expression','parser.py',219),
  ('or_expression -> or_expression | and_expression','or_expression',3,'p_or_expression','parser.py',220),
  ('expression -> or_expression','expression',1,'p_expression','parser.py',226),
  ('expression -> expression : or_expression','expression',3,'p_expression','parser.py',227),
  ('assignment_expression -> postfix_expression = expression','assignment_expression',3,'p_assignment_expression','parser.py',233),
  ('eostmt -> ,','eostmt',1,'p_eostmt','parser.py',239),
  ('eostmt -> ;','eostmt',1,'p_eostmt','parser.py',240),
  ('eostmt -> NEWLINE','eostmt',1,'p_eostmt','parser.py',241),
  ('statement -> global_statement','statement',1,'p_statement','parser.py',247),
  ('statement -> clear_statement','statement',1,'p_statement','parser.py',248),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',249),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',250),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',251),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',252),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',253),
  ('statement -> func_statement','statement',1,'p_statement','parser.py',254),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',260),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',261),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','parser.py',267),
  ('identifier_list -> identifier_list IDENTIFIER','identifier_list',2,'p_identifier_list','parser.py',268),
  ('global_statement -> GLOBAL identifier_list eostmt','global_statement',3,'p_global_statement','parser.py',274),
  ('clear_statement -> CLEAR identifier_list eostmt','clear_statement',3,'p_clear_statement','parser.py',280),
  ('expression_statement -> eostmt','expression_statement',1,'p_expression_statement','parser.py',286),
  ('expression_statement -> expression eostmt','expression_statement',2,'p_expression_statement','parser.py',287),
  ('assignment_statement -> assignment_expression eostmt','assignment_statement',2,'p_assignment_statement','parser.py',293),
  ('array_element -> expression','array_element',1,'p_array_element','parser.py',299),
  ('array_element -> expression_statement','array_element',1,'p_array_element','parser.py',300),
  ('array_list -> array_element','array_list',1,'p_array_list','parser.py',306),
  ('array_list -> array_list array_element','array_list',2,'p_array_list','parser.py',307),
  ('selection_statement -> IF expression statement_list END eostmt','selection_statement',5,'p_selection_statement','parser.py',313),
  ('selection_statement -> IF expression statement_list ELSE statement_list END eostmt','selection_statement',7,'p_selection_statement','parser.py',314),
  ('selection_statement -> IF expression statement_list elseif_clause END eostmt','selection_statement',6,'p_selection_statement','parser.py',315),
  ('selection_statement -> IF expression statement_list elseif_clause ELSE statement_list END eostmt','selection_statement',8,'p_selection_statement','parser.py',316),
  ('elseif_clause -> ELSEIF expression statement_list','elseif_clause',3,'p_elseif_clause','parser.py',329),
  ('elseif_clause -> elseif_clause ELSEIF expression statement_list','elseif_clause',4,'p_elseif_clause','parser.py',330),
  ('iteration_statement -> WHILE expression statement_list END eostmt','iteration_statement',5,'p_iteration_statement','parser.py',336),
  ('iteration_statement -> FOR IDENTIFIER = expression statement_list END eostmt','iteration_statement',7,'p_iteration_statement','parser.py',337),
  ('iteration_statement -> FOR ( IDENTIFIER = expression ) statement_list END eostmt','iteration_statement',9,'p_iteration_statement','parser.py',338),
  ('jump_statement -> BREAK eostmt','jump_statement',2,'p_jump_statement','parser.py',350),
  ('jump_statement -> RETURN eostmt','jump_statement',2,'p_jump_statement','parser.py',351),
  ('translation_unit -> statement_list','translation_unit',1,'p_translation_unit','parser.py',360),
  ('func_identifier_list -> IDENTIFIER','func_identifier_list',1,'p_func_identifier_list','parser.py',366),
  ('func_identifier_list -> func_identifier_list , IDENTIFIER','func_identifier_list',3,'p_func_identifier_list','parser.py',367),
  ('func_return_list -> IDENTIFIER','func_return_list',1,'p_func_return_list','parser.py',376),
  ('func_return_list -> [ func_identifier_list ]','func_return_list',3,'p_func_return_list','parser.py',377),
  ('func_declare_lhs -> IDENTIFIER','func_declare_lhs',1,'p_func_declare_lhs','parser.py',386),
  ('func_declare_lhs -> IDENTIFIER ( )','func_declare_lhs',3,'p_func_declare_lhs','parser.py',387),
  ('func_declare_lhs -> IDENTIFIER ( func_identifier_list )','func_declare_lhs',4,'p_func_declare_lhs','parser.py',388),
  ('func_declare -> func_declare_lhs','func_declare',1,'p_func_declare','parser.py',397),
  ('func_declare -> func_return_list = func_declare_lhs','func_declare',3,'p_func_declare','parser.py',398),
  ('func_statement -> FUNCTION func_declare eostmt statement_list END','func_statement',5,'p_func_statement','parser.py',407),
]
