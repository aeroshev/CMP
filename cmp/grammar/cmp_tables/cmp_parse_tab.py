
# cmp_parse_tab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "translation_unitARRAY_DIV ARRAY_MUL ARRAY_POW ARRAY_RDIV BREAK CLEAR CONSTANT ELSE ELSEIF END EQ_OP FOR FUNCTION GE_OP GLOBAL IDENTIFIER IF LE_OP NEWLINE NE_OP RETURN STRING_LITERAL TRANSPOSE WHILE\n        primary_expression : IDENTIFIER\n                           | CONSTANT\n                           | STRING_LITERAL\n                           | '(' expression ')'\n                           | '[' ']'\n                           | '[' array_list ']'\n        \n        postfix_expression : primary_expression\n                           | array_expression\n                           | postfix_expression TRANSPOSE\n        \n        index_expression : ':'\n                         | expression\n        \n        index_expression_list : index_expression\n                              | index_expression_list ',' index_expression\n        \n        array_expression : IDENTIFIER '(' index_expression_list ')'\n        \n        unary_expression : postfix_expression\n                         | unary_operator postfix_expression\n        \n        unary_operator : '+'\n                       | '-'\n                       | '~'\n        \n        multiplicative_expression : unary_expression\n                                  | multiplicative_expression '*' unary_expression\n                                  | multiplicative_expression '/' unary_expression\n                                  | multiplicative_expression '^' unary_expression\n                                  | multiplicative_expression ARRAY_MUL unary_expression\n                                  | multiplicative_expression ARRAY_DIV unary_expression\n                                  | multiplicative_expression ARRAY_RDIV unary_expression\n                                  | multiplicative_expression ARRAY_POW unary_expression\n        \n        additive_expression : multiplicative_expression\n                            | additive_expression '+' multiplicative_expression\n                            | additive_expression '-' multiplicative_expression\n        \n        relational_expression : additive_expression\n                              | relational_expression '<' additive_expression\n                              | relational_expression '>' additive_expression\n                              | relational_expression LE_OP additive_expression\n                              | relational_expression GE_OP additive_expression\n        \n        equality_expression : relational_expression\n                            | equality_expression EQ_OP relational_expression\n                            | equality_expression NE_OP relational_expression\n        \n        and_expression : equality_expression\n                       | and_expression '&' equality_expression\n        \n        or_expression : and_expression\n                      | or_expression '|' and_expression\n        \n        expression : or_expression\n                   | expression ':' or_expression\n        \n        assignment_expression : postfix_expression '=' expression\n        \n        eostmt : ','\n               | ';'\n               | NEWLINE\n        \n        statement : global_statement\n                  | clear_statement\n                  | assignment_statement\n                  | expression_statement\n                  | selection_statement\n                  | iteration_statement\n                  | jump_statement\n                  | func_statement\n        \n        statement_list : statement\n                       | statement_list statement\n        \n        identifier_list : IDENTIFIER\n                        | identifier_list IDENTIFIER\n        \n        global_statement : GLOBAL identifier_list eostmt\n        \n        clear_statement : CLEAR identifier_list eostmt\n        \n        expression_statement : eostmt\n                             | expression eostmt\n        \n        assignment_statement : assignment_expression eostmt\n        \n        array_element : expression\n                      | expression_statement\n        \n        array_list : array_element\n                   | array_list array_element\n        \n        selection_statement : IF expression statement_list END eostmt\n                            | IF expression statement_list ELSE statement_list END eostmt\n                            | IF expression statement_list elseif_clause END eostmt\n                            | IF expression statement_list elseif_clause ELSE statement_list END eostmt\n        \n        elseif_clause : ELSEIF expression statement_list\n                      | elseif_clause ELSEIF expression statement_list\n        \n        iteration_statement : WHILE expression statement_list END eostmt\n                            | FOR IDENTIFIER '=' expression statement_list END eostmt\n                            | FOR '(' IDENTIFIER '=' expression ')' statement_list END eostmt\n        \n        jump_statement : BREAK eostmt\n                       | RETURN eostmt\n        \n        translation_unit : statement_list\n        \n        func_identifier_list : IDENTIFIER\n                             | func_identifier_list ',' IDENTIFIER\n        \n        func_return_list : IDENTIFIER\n                         | '[' func_identifier_list ']'\n        \n        func_declare_lhs : IDENTIFIER\n                         | IDENTIFIER '(' ')'\n                         | IDENTIFIER '(' func_identifier_list ')'\n        \n        func_declare : func_declare_lhs\n                     | func_return_list '=' func_declare_lhs\n        \n        func_statement : FUNCTION func_declare eostmt statement_list END\n        "
    
_lr_action_items = {'GLOBAL':([0,2,3,4,5,6,7,8,9,10,11,13,20,26,27,28,29,30,31,32,33,34,36,37,38,39,42,45,49,50,52,53,54,59,60,67,70,90,91,93,94,95,96,103,104,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,134,136,138,145,146,148,150,151,152,155,159,160,161,162,164,165,167,168,169,170,172,],[12,12,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,-1,-46,-47,-48,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-58,-65,-64,12,-15,12,-79,-80,-9,-5,-16,-61,-62,-44,12,12,-4,12,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,12,12,-14,12,-70,12,12,12,-76,12,-91,-72,12,12,12,12,-71,12,-77,12,-73,-78,]),'CLEAR':([0,2,3,4,5,6,7,8,9,10,11,13,20,26,27,28,29,30,31,32,33,34,36,37,38,39,42,45,49,50,52,53,54,59,60,67,70,90,91,93,94,95,96,103,104,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,134,136,138,145,146,148,150,151,152,155,159,160,161,162,164,165,167,168,169,170,172,],[14,14,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,-1,-46,-47,-48,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-58,-65,-64,14,-15,14,-79,-80,-9,-5,-16,-61,-62,-44,14,14,-4,14,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,14,14,-14,14,-70,14,14,14,-76,14,-91,-72,14,14,14,14,-71,14,-77,14,-73,-78,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,13,20,26,27,28,29,30,31,32,33,34,36,37,38,39,42,45,49,50,52,53,54,59,60,67,70,90,91,93,94,95,96,103,104,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,134,136,138,145,146,148,150,151,152,155,159,160,161,162,164,165,167,168,169,170,172,],[17,17,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,-1,-46,-47,-48,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-58,-65,-64,17,-15,17,-79,-80,-9,-5,-16,-61,-62,-44,17,17,-4,17,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,17,17,-14,17,-70,17,17,17,-76,17,-91,-72,17,17,17,17,-71,17,-77,17,-73,-78,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,13,20,26,27,28,29,30,31,32,33,34,36,37,38,39,42,45,49,50,52,53,54,59,60,67,70,90,91,93,94,95,96,103,104,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,134,136,138,145,146,148,150,151,152,155,159,160,161,162,164,165,167,168,169,170,172,],[18,18,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,-1,-46,-47,-48,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-58,-65,-64,18,-15,18,-79,-80,-9,-5,-16,-61,-62,-44,18,18,-4,18,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,18,18,-14,18,-70,18,18,18,-76,18,-91,-72,18,18,18,18,-71,18,-77,18,-73,-78,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,13,20,26,27,28,29,30,31,32,33,34,36,37,38,39,42,45,49,50,52,53,54,59,60,67,70,90,91,93,94,95,96,103,104,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,134,136,138,145,146,148,150,151,152,155,159,160,161,162,164,165,167,168,169,170,172,],[19,19,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,-1,-46,-47,-48,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-58,-65,-64,19,-15,19,-79,-80,-9,-5,-16,-61,-62,-44,19,19,-4,19,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,19,19,-14,19,-70,19,19,19,-76,19,-91,-72,19,19,19,19,-71,19,-77,19,-73,-78,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,13,20,26,27,28,29,30,31,32,33,34,36,37,38,39,42,45,49,50,52,53,54,59,60,67,70,90,91,93,94,95,96,103,104,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,134,136,138,145,146,148,150,151,152,155,159,160,161,162,164,165,167,168,169,170,172,],[22,22,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,-1,-46,-47,-48,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-58,-65,-64,22,-15,22,-79,-80,-9,-5,-16,-61,-62,-44,22,22,-4,22,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,22,22,-14,22,-70,22,22,22,-76,22,-91,-72,22,22,22,22,-71,22,-77,22,-73,-78,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,13,20,26,27,28,29,30,31,32,33,34,36,37,38,39,42,45,49,50,52,53,54,59,60,67,70,90,91,93,94,95,96,103,104,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,134,136,138,145,146,148,150,151,152,155,159,160,161,162,164,165,167,168,169,170,172,],[23,23,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,-1,-46,-47,-48,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-58,-65,-64,23,-15,23,-79,-80,-9,-5,-16,-61,-62,-44,23,23,-4,23,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,23,23,-14,23,-70,23,23,23,-76,23,-91,-72,23,23,23,23,-71,23,-77,23,-73,-78,]),'FUNCTION':([0,2,3,4,5,6,7,8,9,10,11,13,20,26,27,28,29,30,31,32,33,34,36,37,38,39,42,45,49,50,52,53,54,59,60,67,70,90,91,93,94,95,96,103,104,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,134,136,138,145,146,148,150,151,152,155,159,160,161,162,164,165,167,168,169,170,172,],[24,24,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,-1,-46,-47,-48,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-58,-65,-64,24,-15,24,-79,-80,-9,-5,-16,-61,-62,-44,24,24,-4,24,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,24,24,-14,24,-70,24,24,24,-76,24,-91,-72,24,24,24,24,-71,24,-77,24,-73,-78,]),',':([0,2,3,4,5,6,7,8,9,10,11,13,15,16,20,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,45,46,47,48,49,50,52,53,54,59,60,61,62,64,67,70,71,72,73,74,90,91,92,93,94,95,96,99,100,101,102,103,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,136,138,139,140,141,142,145,146,147,148,150,151,152,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,],[26,26,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,26,26,-1,26,26,-15,-46,-47,-48,-43,-7,-8,-41,-2,-3,26,-39,-36,-31,-28,-20,-58,26,-59,26,-65,-64,26,-15,26,-79,-80,26,-89,-86,-9,-5,26,-68,26,-67,-16,-61,-60,-62,-44,26,26,137,-12,-10,-11,-4,26,144,-82,-45,-42,-40,-6,-69,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,26,26,26,26,-14,26,-90,-86,-87,144,-70,26,26,26,26,-76,26,-13,-91,-88,-83,26,-72,26,26,26,26,26,-71,26,26,-77,26,-73,26,-78,]),';':([0,2,3,4,5,6,7,8,9,10,11,13,15,16,20,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,45,46,47,48,49,50,52,53,54,59,60,61,62,64,67,70,71,72,73,74,90,91,92,93,94,95,96,103,104,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,136,138,139,140,141,145,146,147,148,150,151,152,155,156,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,],[27,27,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,27,27,-1,27,27,-15,-46,-47,-48,-43,-7,-8,-41,-2,-3,27,-39,-36,-31,-28,-20,-58,27,-59,27,-65,-64,27,-15,27,-79,-80,27,-89,-86,-9,-5,27,-68,27,-67,-16,-61,-60,-62,-44,27,27,-4,27,-45,-42,-40,-6,-69,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,27,27,27,27,-14,27,-90,-86,-87,-70,27,27,27,27,-76,27,-91,-88,27,-72,27,27,27,27,27,-71,27,27,-77,27,-73,27,-78,]),'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,13,15,16,20,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,45,46,47,48,49,50,52,53,54,59,60,61,62,64,67,70,71,72,73,74,90,91,92,93,94,95,96,103,104,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,136,138,139,140,141,145,146,147,148,150,151,152,155,156,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,],[28,28,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,28,28,-1,28,28,-15,-46,-47,-48,-43,-7,-8,-41,-2,-3,28,-39,-36,-31,-28,-20,-58,28,-59,28,-65,-64,28,-15,28,-79,-80,28,-89,-86,-9,-5,28,-68,28,-67,-16,-61,-60,-62,-44,28,28,-4,28,-45,-42,-40,-6,-69,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,28,28,28,28,-14,28,-90,-86,-87,-70,28,28,28,28,-76,28,-91,-88,28,-72,28,28,28,28,28,-71,28,28,-77,28,-73,28,-78,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,103,104,105,106,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,132,134,135,136,137,138,144,145,146,148,149,150,151,152,155,159,160,161,162,164,165,167,168,169,170,172,],[20,20,-57,-49,-50,-51,-52,-53,-54,-55,-56,47,-63,47,20,20,55,-1,20,64,-46,-47,-48,-43,-7,-8,-41,-2,-3,20,-39,-36,-31,-28,-17,-18,-20,20,-19,-58,92,-59,92,-65,-64,20,20,-15,20,98,20,-79,-80,108,20,-9,20,20,-5,20,-68,-66,-67,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-16,-61,-60,-62,-44,20,20,20,-4,20,140,108,-42,-40,-6,-69,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,20,20,20,20,-14,20,20,157,-70,20,20,20,20,-76,20,-91,-72,20,20,20,20,-71,20,-77,20,-73,-78,]),'CONSTANT':([0,2,3,4,5,6,7,8,9,10,11,13,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,50,51,52,53,54,57,59,60,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,132,134,135,136,137,138,145,146,148,149,150,151,152,155,159,160,161,162,164,165,167,168,169,170,172,],[33,33,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,33,33,-1,33,-46,-47,-48,-43,-7,-8,-41,-2,-3,33,-39,-36,-31,-28,-17,-18,-20,33,-19,-58,-65,-64,33,33,-15,33,33,-79,-80,33,-9,33,33,-5,33,-68,-66,-67,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-16,-61,-62,-44,33,33,33,-4,33,-42,-40,-6,-69,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,33,33,33,33,-14,33,33,-70,33,33,33,33,-76,33,-91,-72,33,33,33,33,-71,33,-77,33,-73,-78,]),'STRING_LITERAL':([0,2,3,4,5,6,7,8,9,10,11,13,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,50,51,52,53,54,57,59,60,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,132,134,135,136,137,138,145,146,148,149,150,151,152,155,159,160,161,162,164,165,167,168,169,170,172,],[34,34,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,34,34,-1,34,-46,-47,-48,-43,-7,-8,-41,-2,-3,34,-39,-36,-31,-28,-17,-18,-20,34,-19,-58,-65,-64,34,34,-15,34,34,-79,-80,34,-9,34,34,-5,34,-68,-66,-67,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-16,-61,-62,-44,34,34,34,-4,34,-42,-40,-6,-69,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,34,34,34,34,-14,34,34,-70,34,34,34,34,-76,34,-91,-72,34,34,34,34,-71,34,-77,34,-73,-78,]),'(':([0,2,3,4,5,6,7,8,9,10,11,13,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,50,51,52,53,54,57,59,60,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,132,134,135,136,137,138,140,145,146,148,149,150,151,152,155,159,160,161,162,164,165,167,168,169,170,172,],[21,21,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,21,21,56,57,21,-46,-47,-48,-43,-7,-8,-41,-2,-3,21,-39,-36,-31,-28,-17,-18,-20,21,-19,-58,-65,-64,21,21,-15,21,21,-79,-80,106,21,-9,21,21,-5,21,-68,-66,-67,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-16,-61,-62,-44,21,21,21,-4,21,-42,-40,-6,-69,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,21,21,21,21,-14,21,21,106,-70,21,21,21,21,-76,21,-91,-72,21,21,21,21,-71,21,-77,21,-73,-78,]),'[':([0,2,3,4,5,6,7,8,9,10,11,13,17,18,20,21,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,50,51,52,53,54,57,59,60,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,132,134,135,136,137,138,145,146,148,149,150,151,152,155,159,160,161,162,164,165,167,168,169,170,172,],[35,35,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,35,35,-1,35,65,-46,-47,-48,-43,-7,-8,-41,-2,-3,35,-39,-36,-31,-28,-17,-18,-20,35,-19,-58,-65,-64,35,35,-15,35,35,-79,-80,35,-9,35,35,-5,35,-68,-66,-67,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-16,-61,-62,-44,35,35,35,-4,35,-42,-40,-6,-69,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,35,35,35,35,-14,35,35,-70,35,35,35,35,-76,35,-91,-72,35,35,35,35,-71,35,-77,35,-73,-78,]),'+':([0,2,3,4,5,6,7,8,9,10,11,13,17,18,20,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,45,49,50,51,52,53,54,57,59,60,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,132,134,135,136,137,138,145,146,148,149,150,151,152,155,159,160,161,162,164,165,167,168,169,170,172,],[40,40,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,40,40,-1,40,-15,-46,-47,-48,-43,-7,-8,-41,-2,-3,40,-39,-36,81,-28,-20,-58,-65,-64,40,40,-15,40,40,-79,-80,40,-9,40,40,-5,40,-68,-66,-67,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-16,-61,-62,-44,40,40,40,-4,40,-42,-40,-6,-69,-37,-38,81,81,81,81,-29,-30,-21,-22,-23,-24,-25,-26,-27,40,40,40,40,-14,40,40,-70,40,40,40,40,-76,40,-91,-72,40,40,40,40,-71,40,-77,40,-73,-78,]),'-':([0,2,3,4,5,6,7,8,9,10,11,13,17,18,20,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,45,49,50,51,52,53,54,57,59,60,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,132,134,135,136,137,138,145,146,148,149,150,151,152,155,159,160,161,162,164,165,167,168,169,170,172,],[41,41,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,41,41,-1,41,-15,-46,-47,-48,-43,-7,-8,-41,-2,-3,41,-39,-36,82,-28,-20,-58,-65,-64,41,41,-15,41,41,-79,-80,41,-9,41,41,-5,41,-68,-66,-67,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-16,-61,-62,-44,41,41,41,-4,41,-42,-40,-6,-69,-37,-38,82,82,82,82,-29,-30,-21,-22,-23,-24,-25,-26,-27,41,41,41,41,-14,41,41,-70,41,41,41,41,-76,41,-91,-72,41,41,41,41,-71,41,-77,41,-73,-78,]),'~':([0,2,3,4,5,6,7,8,9,10,11,13,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,45,49,50,51,52,53,54,57,59,60,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,132,134,135,136,137,138,145,146,148,149,150,151,152,155,159,160,161,162,164,165,167,168,169,170,172,],[44,44,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,44,44,-1,44,-46,-47,-48,-43,-7,-8,-41,-2,-3,44,-39,-36,-31,-28,-20,-58,-65,-64,44,44,-15,44,44,-79,-80,44,-9,44,44,-5,44,-68,-66,-67,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-16,-61,-62,-44,44,44,44,-4,44,-42,-40,-6,-69,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,44,44,44,44,-14,44,44,-70,44,44,44,44,-76,44,-91,-72,44,44,44,44,-71,44,-77,44,-73,-78,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,13,26,27,28,45,49,50,59,60,91,93,145,151,155,159,165,168,170,172,],[0,-81,-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,-46,-47,-48,-58,-65,-64,-79,-80,-61,-62,-70,-76,-91,-72,-71,-77,-73,-78,]),'END':([3,4,5,6,7,8,9,10,11,13,26,27,28,45,49,50,59,60,91,93,95,96,131,138,145,146,151,152,155,159,160,162,165,167,168,169,170,172,],[-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,-46,-47,-48,-58,-65,-64,-79,-80,-61,-62,129,133,147,155,-70,158,-76,163,-91,-72,166,-74,-71,-75,-77,171,-73,-78,]),'ELSE':([3,4,5,6,7,8,9,10,11,13,26,27,28,45,49,50,59,60,91,93,95,131,145,151,155,159,162,165,167,168,170,172,],[-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,-46,-47,-48,-58,-65,-64,-79,-80,-61,-62,130,148,-70,-76,-91,-72,-74,-71,-75,-77,-73,-78,]),'ELSEIF':([3,4,5,6,7,8,9,10,11,13,26,27,28,45,49,50,59,60,91,93,95,131,145,151,155,159,162,165,167,168,170,172,],[-57,-49,-50,-51,-52,-53,-54,-55,-56,-63,-46,-47,-48,-58,-65,-64,-79,-80,-61,-62,132,149,-70,-76,-91,-72,-74,-71,-75,-77,-73,-78,]),']':([13,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,50,53,67,70,71,72,73,74,90,94,103,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,157,],[-63,-1,-46,-47,-48,-43,-7,-8,-41,-2,-3,70,-39,-36,-31,-28,-20,-64,-15,-9,-5,112,-68,-66,-67,-16,-44,-4,143,-82,-42,-40,-6,-69,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,-83,]),':':([16,20,25,29,30,31,32,33,34,36,37,38,39,42,52,53,54,57,58,67,70,73,90,94,102,103,109,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,134,136,137,150,153,161,],[51,-1,-15,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,51,-15,51,101,51,-9,-5,51,-16,-44,51,-4,51,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,51,-14,101,51,51,51,]),'=':([20,25,30,31,33,34,55,63,64,67,70,98,103,112,136,143,],[-1,66,-7,-8,-2,-3,97,105,-84,-9,-5,135,-4,-6,-14,-85,]),'TRANSPOSE':([20,25,30,31,33,34,53,67,70,90,103,112,136,],[-1,67,-7,-8,-2,-3,67,-9,-5,67,-4,-6,-14,]),'*':([20,25,30,31,33,34,39,42,53,67,70,90,103,112,120,121,122,123,124,125,126,127,128,136,],[-1,-15,-7,-8,-2,-3,83,-20,-15,-9,-5,-16,-4,-6,83,83,-21,-22,-23,-24,-25,-26,-27,-14,]),'/':([20,25,30,31,33,34,39,42,53,67,70,90,103,112,120,121,122,123,124,125,126,127,128,136,],[-1,-15,-7,-8,-2,-3,84,-20,-15,-9,-5,-16,-4,-6,84,84,-21,-22,-23,-24,-25,-26,-27,-14,]),'^':([20,25,30,31,33,34,39,42,53,67,70,90,103,112,120,121,122,123,124,125,126,127,128,136,],[-1,-15,-7,-8,-2,-3,85,-20,-15,-9,-5,-16,-4,-6,85,85,-21,-22,-23,-24,-25,-26,-27,-14,]),'ARRAY_MUL':([20,25,30,31,33,34,39,42,53,67,70,90,103,112,120,121,122,123,124,125,126,127,128,136,],[-1,-15,-7,-8,-2,-3,86,-20,-15,-9,-5,-16,-4,-6,86,86,-21,-22,-23,-24,-25,-26,-27,-14,]),'ARRAY_DIV':([20,25,30,31,33,34,39,42,53,67,70,90,103,112,120,121,122,123,124,125,126,127,128,136,],[-1,-15,-7,-8,-2,-3,87,-20,-15,-9,-5,-16,-4,-6,87,87,-21,-22,-23,-24,-25,-26,-27,-14,]),'ARRAY_RDIV':([20,25,30,31,33,34,39,42,53,67,70,90,103,112,120,121,122,123,124,125,126,127,128,136,],[-1,-15,-7,-8,-2,-3,88,-20,-15,-9,-5,-16,-4,-6,88,88,-21,-22,-23,-24,-25,-26,-27,-14,]),'ARRAY_POW':([20,25,30,31,33,34,39,42,53,67,70,90,103,112,120,121,122,123,124,125,126,127,128,136,],[-1,-15,-7,-8,-2,-3,89,-20,-15,-9,-5,-16,-4,-6,89,89,-21,-22,-23,-24,-25,-26,-27,-14,]),'<':([20,25,30,31,33,34,37,38,39,42,53,67,70,90,103,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,],[-1,-15,-7,-8,-2,-3,77,-31,-28,-20,-15,-9,-5,-16,-4,-6,77,77,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,]),'>':([20,25,30,31,33,34,37,38,39,42,53,67,70,90,103,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,],[-1,-15,-7,-8,-2,-3,78,-31,-28,-20,-15,-9,-5,-16,-4,-6,78,78,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,]),'LE_OP':([20,25,30,31,33,34,37,38,39,42,53,67,70,90,103,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,],[-1,-15,-7,-8,-2,-3,79,-31,-28,-20,-15,-9,-5,-16,-4,-6,79,79,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,]),'GE_OP':([20,25,30,31,33,34,37,38,39,42,53,67,70,90,103,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,],[-1,-15,-7,-8,-2,-3,80,-31,-28,-20,-15,-9,-5,-16,-4,-6,80,80,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,]),'EQ_OP':([20,25,30,31,33,34,36,37,38,39,42,53,67,70,90,103,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,],[-1,-15,-7,-8,-2,-3,75,-36,-31,-28,-20,-15,-9,-5,-16,-4,75,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,]),'NE_OP':([20,25,30,31,33,34,36,37,38,39,42,53,67,70,90,103,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,],[-1,-15,-7,-8,-2,-3,76,-36,-31,-28,-20,-15,-9,-5,-16,-4,76,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,]),'&':([20,25,30,31,32,33,34,36,37,38,39,42,53,67,70,90,103,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,],[-1,-15,-7,-8,69,-2,-3,-39,-36,-31,-28,-20,-15,-9,-5,-16,-4,69,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,]),'|':([20,25,29,30,31,32,33,34,36,37,38,39,42,53,67,70,90,94,103,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,],[-1,-15,68,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-15,-9,-5,-16,68,-4,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,]),')':([20,29,30,31,32,33,34,36,37,38,39,42,53,58,67,70,90,94,99,100,101,102,103,106,108,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,142,153,154,157,],[-1,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-15,103,-9,-5,-16,-44,136,-12,-10,-11,-4,141,-82,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,156,164,-13,-83,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'statement_list':([0,52,54,104,130,134,148,150,161,164,],[2,95,96,138,146,152,160,162,167,169,]),'statement':([0,2,52,54,95,96,104,130,134,138,146,148,150,152,160,161,162,164,167,169,],[3,45,3,3,45,45,3,3,3,45,45,3,3,45,45,3,45,3,45,45,]),'global_statement':([0,2,52,54,95,96,104,130,134,138,146,148,150,152,160,161,162,164,167,169,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'clear_statement':([0,2,52,54,95,96,104,130,134,138,146,148,150,152,160,161,162,164,167,169,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'assignment_statement':([0,2,52,54,95,96,104,130,134,138,146,148,150,152,160,161,162,164,167,169,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'expression_statement':([0,2,35,52,54,71,95,96,104,130,134,138,146,148,150,152,160,161,162,164,167,169,],[7,7,74,7,7,74,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'selection_statement':([0,2,52,54,95,96,104,130,134,138,146,148,150,152,160,161,162,164,167,169,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'iteration_statement':([0,2,52,54,95,96,104,130,134,138,146,148,150,152,160,161,162,164,167,169,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'jump_statement':([0,2,52,54,95,96,104,130,134,138,146,148,150,152,160,161,162,164,167,169,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'func_statement':([0,2,52,54,95,96,104,130,134,138,146,148,150,152,160,161,162,164,167,169,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'eostmt':([0,2,15,16,22,23,35,46,48,52,54,61,71,73,95,96,104,129,130,133,134,138,146,147,148,150,152,158,160,161,162,163,164,166,167,169,171,],[13,13,49,50,59,60,13,91,93,13,13,104,13,50,13,13,13,145,13,151,13,13,13,159,13,13,13,165,13,13,13,168,13,170,13,13,172,]),'assignment_expression':([0,2,52,54,95,96,104,130,134,138,146,148,150,152,160,161,162,164,167,169,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'expression':([0,2,17,18,21,35,52,54,57,66,71,95,96,97,104,130,132,134,135,137,138,146,148,149,150,152,160,161,162,164,167,169,],[16,16,52,54,58,73,16,16,102,109,73,16,16,134,16,16,150,16,153,102,16,16,16,161,16,16,16,16,16,16,16,16,]),'postfix_expression':([0,2,17,18,21,35,43,51,52,54,57,66,68,69,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,95,96,97,104,130,132,134,135,137,138,146,148,149,150,152,160,161,162,164,167,169,],[25,25,53,53,53,53,90,53,25,25,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,25,25,53,25,25,53,25,53,53,25,25,25,53,25,25,25,25,25,25,25,25,]),'or_expression':([0,2,17,18,21,35,51,52,54,57,66,71,95,96,97,104,130,132,134,135,137,138,146,148,149,150,152,160,161,162,164,167,169,],[29,29,29,29,29,29,94,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'primary_expression':([0,2,17,18,21,35,43,51,52,54,57,66,68,69,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,95,96,97,104,130,132,134,135,137,138,146,148,149,150,152,160,161,162,164,167,169,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'array_expression':([0,2,17,18,21,35,43,51,52,54,57,66,68,69,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,95,96,97,104,130,132,134,135,137,138,146,148,149,150,152,160,161,162,164,167,169,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'and_expression':([0,2,17,18,21,35,51,52,54,57,66,68,71,95,96,97,104,130,132,134,135,137,138,146,148,149,150,152,160,161,162,164,167,169,],[32,32,32,32,32,32,32,32,32,32,32,110,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'equality_expression':([0,2,17,18,21,35,51,52,54,57,66,68,69,71,95,96,97,104,130,132,134,135,137,138,146,148,149,150,152,160,161,162,164,167,169,],[36,36,36,36,36,36,36,36,36,36,36,36,111,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'relational_expression':([0,2,17,18,21,35,51,52,54,57,66,68,69,71,75,76,95,96,97,104,130,132,134,135,137,138,146,148,149,150,152,160,161,162,164,167,169,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,114,115,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'additive_expression':([0,2,17,18,21,35,51,52,54,57,66,68,69,71,75,76,77,78,79,80,95,96,97,104,130,132,134,135,137,138,146,148,149,150,152,160,161,162,164,167,169,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,116,117,118,119,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'multiplicative_expression':([0,2,17,18,21,35,51,52,54,57,66,68,69,71,75,76,77,78,79,80,81,82,95,96,97,104,130,132,134,135,137,138,146,148,149,150,152,160,161,162,164,167,169,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,120,121,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'unary_expression':([0,2,17,18,21,35,51,52,54,57,66,68,69,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,95,96,97,104,130,132,134,135,137,138,146,148,149,150,152,160,161,162,164,167,169,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,122,123,124,125,126,127,128,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'unary_operator':([0,2,17,18,21,35,51,52,54,57,66,68,69,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,95,96,97,104,130,132,134,135,137,138,146,148,149,150,152,160,161,162,164,167,169,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'identifier_list':([12,14,],[46,48,]),'func_declare':([24,],[61,]),'func_declare_lhs':([24,105,],[62,139,]),'func_return_list':([24,],[63,]),'array_list':([35,],[71,]),'array_element':([35,71,],[72,113,]),'index_expression_list':([57,],[99,]),'index_expression':([57,137,],[100,154,]),'func_identifier_list':([65,106,],[107,142,]),'elseif_clause':([95,],[131,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','parser.py',85),
  ('primary_expression -> CONSTANT','primary_expression',1,'p_primary_expression','parser.py',86),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','parser.py',87),
  ('primary_expression -> ( expression )','primary_expression',3,'p_primary_expression','parser.py',88),
  ('primary_expression -> [ ]','primary_expression',2,'p_primary_expression','parser.py',89),
  ('primary_expression -> [ array_list ]','primary_expression',3,'p_primary_expression','parser.py',90),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser.py',104),
  ('postfix_expression -> array_expression','postfix_expression',1,'p_postfix_expression','parser.py',105),
  ('postfix_expression -> postfix_expression TRANSPOSE','postfix_expression',2,'p_postfix_expression','parser.py',106),
  ('index_expression -> :','index_expression',1,'p_index_expression','parser.py',112),
  ('index_expression -> expression','index_expression',1,'p_index_expression','parser.py',113),
  ('index_expression_list -> index_expression','index_expression_list',1,'p_index_expression_list','parser.py',119),
  ('index_expression_list -> index_expression_list , index_expression','index_expression_list',3,'p_index_expression_list','parser.py',120),
  ('array_expression -> IDENTIFIER ( index_expression_list )','array_expression',4,'p_array_expression','parser.py',126),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',132),
  ('unary_expression -> unary_operator postfix_expression','unary_expression',2,'p_unary_expression','parser.py',133),
  ('unary_operator -> +','unary_operator',1,'p_unary_operator','parser.py',139),
  ('unary_operator -> -','unary_operator',1,'p_unary_operator','parser.py',140),
  ('unary_operator -> ~','unary_operator',1,'p_unary_operator','parser.py',141),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','parser.py',146),
  ('multiplicative_expression -> multiplicative_expression * unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',147),
  ('multiplicative_expression -> multiplicative_expression / unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',148),
  ('multiplicative_expression -> multiplicative_expression ^ unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',149),
  ('multiplicative_expression -> multiplicative_expression ARRAY_MUL unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',150),
  ('multiplicative_expression -> multiplicative_expression ARRAY_DIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',151),
  ('multiplicative_expression -> multiplicative_expression ARRAY_RDIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',152),
  ('multiplicative_expression -> multiplicative_expression ARRAY_POW unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',153),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','parser.py',159),
  ('additive_expression -> additive_expression + multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',160),
  ('additive_expression -> additive_expression - multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',161),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression','parser.py',167),
  ('relational_expression -> relational_expression < additive_expression','relational_expression',3,'p_relational_expression','parser.py',168),
  ('relational_expression -> relational_expression > additive_expression','relational_expression',3,'p_relational_expression','parser.py',169),
  ('relational_expression -> relational_expression LE_OP additive_expression','relational_expression',3,'p_relational_expression','parser.py',170),
  ('relational_expression -> relational_expression GE_OP additive_expression','relational_expression',3,'p_relational_expression','parser.py',171),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','parser.py',177),
  ('equality_expression -> equality_expression EQ_OP relational_expression','equality_expression',3,'p_equality_expression','parser.py',178),
  ('equality_expression -> equality_expression NE_OP relational_expression','equality_expression',3,'p_equality_expression','parser.py',179),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','parser.py',185),
  ('and_expression -> and_expression & equality_expression','and_expression',3,'p_and_expression','parser.py',186),
  ('or_expression -> and_expression','or_expression',1,'p_or_expression','parser.py',192),
  ('or_expression -> or_expression | and_expression','or_expression',3,'p_or_expression','parser.py',193),
  ('expression -> or_expression','expression',1,'p_expression','parser.py',199),
  ('expression -> expression : or_expression','expression',3,'p_expression','parser.py',200),
  ('assignment_expression -> postfix_expression = expression','assignment_expression',3,'p_assignment_expression','parser.py',206),
  ('eostmt -> ,','eostmt',1,'p_eostmt','parser.py',212),
  ('eostmt -> ;','eostmt',1,'p_eostmt','parser.py',213),
  ('eostmt -> NEWLINE','eostmt',1,'p_eostmt','parser.py',214),
  ('statement -> global_statement','statement',1,'p_statement','parser.py',219),
  ('statement -> clear_statement','statement',1,'p_statement','parser.py',220),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',221),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',222),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',223),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',224),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',225),
  ('statement -> func_statement','statement',1,'p_statement','parser.py',226),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',232),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',233),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','parser.py',239),
  ('identifier_list -> identifier_list IDENTIFIER','identifier_list',2,'p_identifier_list','parser.py',240),
  ('global_statement -> GLOBAL identifier_list eostmt','global_statement',3,'p_global_statement','parser.py',246),
  ('clear_statement -> CLEAR identifier_list eostmt','clear_statement',3,'p_clear_statement','parser.py',252),
  ('expression_statement -> eostmt','expression_statement',1,'p_expression_statement','parser.py',258),
  ('expression_statement -> expression eostmt','expression_statement',2,'p_expression_statement','parser.py',259),
  ('assignment_statement -> assignment_expression eostmt','assignment_statement',2,'p_assignment_statement','parser.py',265),
  ('array_element -> expression','array_element',1,'p_array_element','parser.py',271),
  ('array_element -> expression_statement','array_element',1,'p_array_element','parser.py',272),
  ('array_list -> array_element','array_list',1,'p_array_list','parser.py',278),
  ('array_list -> array_list array_element','array_list',2,'p_array_list','parser.py',279),
  ('selection_statement -> IF expression statement_list END eostmt','selection_statement',5,'p_selection_statement','parser.py',285),
  ('selection_statement -> IF expression statement_list ELSE statement_list END eostmt','selection_statement',7,'p_selection_statement','parser.py',286),
  ('selection_statement -> IF expression statement_list elseif_clause END eostmt','selection_statement',6,'p_selection_statement','parser.py',287),
  ('selection_statement -> IF expression statement_list elseif_clause ELSE statement_list END eostmt','selection_statement',8,'p_selection_statement','parser.py',288),
  ('elseif_clause -> ELSEIF expression statement_list','elseif_clause',3,'p_elseif_clause','parser.py',301),
  ('elseif_clause -> elseif_clause ELSEIF expression statement_list','elseif_clause',4,'p_elseif_clause','parser.py',302),
  ('iteration_statement -> WHILE expression statement_list END eostmt','iteration_statement',5,'p_iteration_statement','parser.py',307),
  ('iteration_statement -> FOR IDENTIFIER = expression statement_list END eostmt','iteration_statement',7,'p_iteration_statement','parser.py',308),
  ('iteration_statement -> FOR ( IDENTIFIER = expression ) statement_list END eostmt','iteration_statement',9,'p_iteration_statement','parser.py',309),
  ('jump_statement -> BREAK eostmt','jump_statement',2,'p_jump_statement','parser.py',321),
  ('jump_statement -> RETURN eostmt','jump_statement',2,'p_jump_statement','parser.py',322),
  ('translation_unit -> statement_list','translation_unit',1,'p_translation_unit','parser.py',331),
  ('func_identifier_list -> IDENTIFIER','func_identifier_list',1,'p_func_identifier_list','parser.py',337),
  ('func_identifier_list -> func_identifier_list , IDENTIFIER','func_identifier_list',3,'p_func_identifier_list','parser.py',338),
  ('func_return_list -> IDENTIFIER','func_return_list',1,'p_func_return_list','parser.py',347),
  ('func_return_list -> [ func_identifier_list ]','func_return_list',3,'p_func_return_list','parser.py',348),
  ('func_declare_lhs -> IDENTIFIER','func_declare_lhs',1,'p_func_declare_lhs','parser.py',357),
  ('func_declare_lhs -> IDENTIFIER ( )','func_declare_lhs',3,'p_func_declare_lhs','parser.py',358),
  ('func_declare_lhs -> IDENTIFIER ( func_identifier_list )','func_declare_lhs',4,'p_func_declare_lhs','parser.py',359),
  ('func_declare -> func_declare_lhs','func_declare',1,'p_func_declare','parser.py',368),
  ('func_declare -> func_return_list = func_declare_lhs','func_declare',3,'p_func_declare','parser.py',369),
  ('func_statement -> FUNCTION func_declare eostmt statement_list END','func_statement',5,'p_func_statement','parser.py',378),
]
