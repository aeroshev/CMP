
# cmp_parse_tab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "translation_unitright-right~right+ARRAY_DIV ARRAY_MUL ARRAY_POW ARRAY_RDIV BREAK CLEAR COMMENT CONSTANT ELSE ELSEIF END EQ_OP FOR FUNCTION GE_OP GLOBAL IDENTIFIER IF LE_OP NEWLINE NE_OP RETURN STRING_LITERAL TRANSPOSE WHILE\n        primary_expression : identifier_expression\n                           | constant_expression\n                           | string_literal_expression\n                           | '(' expression ')'\n                           | '[' ']'\n                           | '[' array_list ']'\n        \n        identifier_expression : IDENTIFIER\n        \n        constant_expression : CONSTANT\n        \n        string_literal_expression : STRING_LITERAL\n        \n        postfix_expression : primary_expression\n                           | array_expression\n                           | postfix_expression TRANSPOSE\n        \n        index_expression : ':'\n                         | expression\n        \n        index_expression_list : index_expression\n                              | index_expression_list ',' index_expression\n        \n        array_expression : IDENTIFIER '(' index_expression_list ')'\n        \n        unary_expression : postfix_expression\n                         | unary_operator postfix_expression\n        \n        unary_operator : '+'\n                       | '-'\n                       | '~'\n        \n        multiplicative_expression : unary_expression\n                                  | multiplicative_expression '*' unary_expression\n                                  | multiplicative_expression '/' unary_expression\n                                  | multiplicative_expression '^' unary_expression\n                                  | multiplicative_expression ARRAY_MUL unary_expression\n                                  | multiplicative_expression ARRAY_DIV unary_expression\n                                  | multiplicative_expression ARRAY_RDIV unary_expression\n                                  | multiplicative_expression ARRAY_POW unary_expression\n        \n        additive_expression : multiplicative_expression\n                            | additive_expression '+' multiplicative_expression\n                            | additive_expression '-' multiplicative_expression\n        \n        relational_expression : additive_expression\n                              | relational_expression '<' additive_expression\n                              | relational_expression '>' additive_expression\n                              | relational_expression LE_OP additive_expression\n                              | relational_expression GE_OP additive_expression\n        \n        equality_expression : relational_expression\n                            | equality_expression EQ_OP relational_expression\n                            | equality_expression NE_OP relational_expression\n        \n        and_expression : equality_expression\n                       | and_expression '&' equality_expression\n        \n        or_expression : and_expression\n                      | or_expression '|' and_expression\n        \n        expression : or_expression\n                   | expression ':' or_expression\n        \n        assignment_expression : postfix_expression '=' expression\n        \n        eostmt : ','\n               | ';'\n               | NEWLINE\n        \n        statement : global_statement\n                  | clear_statement\n                  | assignment_statement\n                  | expression_statement\n                  | selection_statement\n                  | iteration_statement\n                  | jump_statement\n                  | func_statement\n        \n        statement_list : statement\n                       | statement_list statement\n                       | statement_list_error\n        \n        statement_list_error : statement_list error\n        \n        identifier_list : IDENTIFIER\n                        | identifier_list IDENTIFIER\n        \n        global_statement : GLOBAL identifier_list eostmt\n        \n        clear_statement : CLEAR identifier_list eostmt\n        \n        expression_statement : eostmt\n                             | expression eostmt\n        \n        assignment_statement : assignment_expression eostmt\n        \n        array_element : expression\n                      | expression_statement\n        \n        array_list : array_element\n                   | array_list array_element\n        \n        selection_statement : IF expression statement_list END eostmt\n                            | IF expression statement_list ELSE statement_list END eostmt\n                            | IF expression statement_list elseif_clause END eostmt\n                            | IF expression statement_list elseif_clause ELSE statement_list END eostmt\n                            | selection_statement_invoke_error\n        \n        selection_statement_invoke_error : IF expression statement_list\n        \n        elseif_clause : ELSEIF expression statement_list\n                      | elseif_clause ELSEIF expression statement_list\n        \n        iteration_statement : WHILE expression statement_list END eostmt\n                            | FOR IDENTIFIER '=' expression statement_list END eostmt\n                            | FOR '(' IDENTIFIER '=' expression ')' statement_list END eostmt\n        \n        jump_statement : BREAK eostmt\n                       | RETURN eostmt\n        \n        translation_unit : statement_list\n        \n        func_identifier_list : IDENTIFIER\n                             | func_identifier_list ',' IDENTIFIER\n        \n        func_return_list : IDENTIFIER\n                         | '[' func_identifier_list ']'\n        \n        func_declare_lhs : IDENTIFIER\n                         | IDENTIFIER '(' ')'\n                         | IDENTIFIER '(' func_identifier_list ')'\n        \n        func_declare : func_declare_lhs\n                     | func_return_list '=' func_declare_lhs\n        \n        func_statement : FUNCTION func_declare eostmt statement_list END\n        "
    
_lr_action_items = {'GLOBAL':([0,2,3,4,5,6,7,8,9,10,11,12,14,19,22,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,47,50,51,55,56,58,59,60,65,66,73,76,96,97,99,100,101,102,109,110,116,117,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,140,142,144,151,152,154,156,157,158,161,165,166,167,168,170,171,173,174,175,176,178,],[13,13,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,-79,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-61,-63,-70,-69,13,-18,13,-86,-87,-12,-5,-19,-66,-67,-47,13,13,-4,13,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,13,13,-17,13,-75,13,13,13,-83,13,-98,-77,13,13,13,13,-76,13,-84,13,-78,-85,]),'CLEAR':([0,2,3,4,5,6,7,8,9,10,11,12,14,19,22,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,47,50,51,55,56,58,59,60,65,66,73,76,96,97,99,100,101,102,109,110,116,117,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,140,142,144,151,152,154,156,157,158,161,165,166,167,168,170,171,173,174,175,176,178,],[15,15,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,-79,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-61,-63,-70,-69,15,-18,15,-86,-87,-12,-5,-19,-66,-67,-47,15,15,-4,15,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,15,15,-17,15,-75,15,15,15,-83,15,-98,-77,15,15,15,15,-76,15,-84,15,-78,-85,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,14,19,22,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,47,50,51,55,56,58,59,60,65,66,73,76,96,97,99,100,101,102,109,110,116,117,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,140,142,144,151,152,154,156,157,158,161,165,166,167,168,170,171,173,174,175,176,178,],[18,18,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,-79,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-61,-63,-70,-69,18,-18,18,-86,-87,-12,-5,-19,-66,-67,-47,18,18,-4,18,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,18,18,-17,18,-75,18,18,18,-83,18,-98,-77,18,18,18,18,-76,18,-84,18,-78,-85,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,14,19,22,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,47,50,51,55,56,58,59,60,65,66,73,76,96,97,99,100,101,102,109,110,116,117,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,140,142,144,151,152,154,156,157,158,161,165,166,167,168,170,171,173,174,175,176,178,],[20,20,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,-79,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-61,-63,-70,-69,20,-18,20,-86,-87,-12,-5,-19,-66,-67,-47,20,20,-4,20,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,20,20,-17,20,-75,20,20,20,-83,20,-98,-77,20,20,20,20,-76,20,-84,20,-78,-85,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,14,19,22,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,47,50,51,55,56,58,59,60,65,66,73,76,96,97,99,100,101,102,109,110,116,117,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,140,142,144,151,152,154,156,157,158,161,165,166,167,168,170,171,173,174,175,176,178,],[21,21,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,-79,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-61,-63,-70,-69,21,-18,21,-86,-87,-12,-5,-19,-66,-67,-47,21,21,-4,21,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,21,21,-17,21,-75,21,21,21,-83,21,-98,-77,21,21,21,21,-76,21,-84,21,-78,-85,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,14,19,22,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,47,50,51,55,56,58,59,60,65,66,73,76,96,97,99,100,101,102,109,110,116,117,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,140,142,144,151,152,154,156,157,158,161,165,166,167,168,170,171,173,174,175,176,178,],[24,24,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,-79,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-61,-63,-70,-69,24,-18,24,-86,-87,-12,-5,-19,-66,-67,-47,24,24,-4,24,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,24,24,-17,24,-75,24,24,24,-83,24,-98,-77,24,24,24,24,-76,24,-84,24,-78,-85,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,14,19,22,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,47,50,51,55,56,58,59,60,65,66,73,76,96,97,99,100,101,102,109,110,116,117,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,140,142,144,151,152,154,156,157,158,161,165,166,167,168,170,171,173,174,175,176,178,],[25,25,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,-79,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-61,-63,-70,-69,25,-18,25,-86,-87,-12,-5,-19,-66,-67,-47,25,25,-4,25,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,25,25,-17,25,-75,25,25,25,-83,25,-98,-77,25,25,25,25,-76,25,-84,25,-78,-85,]),'FUNCTION':([0,2,3,4,5,6,7,8,9,10,11,12,14,19,22,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,47,50,51,55,56,58,59,60,65,66,73,76,96,97,99,100,101,102,109,110,116,117,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,140,142,144,151,152,154,156,157,158,161,165,166,167,168,170,171,173,174,175,176,178,],[26,26,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,-79,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-61,-63,-70,-69,26,-18,26,-86,-87,-12,-5,-19,-66,-67,-47,26,26,-4,26,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,26,26,-17,26,-75,26,26,26,-83,26,-98,-77,26,26,26,26,-76,26,-84,26,-78,-85,]),',':([0,2,3,4,5,6,7,8,9,10,11,12,14,16,17,19,22,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,47,50,51,52,53,54,55,56,58,59,60,65,66,67,68,70,73,76,77,78,79,80,96,97,98,99,100,101,102,105,106,107,108,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,140,142,144,145,146,147,148,151,152,153,154,156,157,158,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,],[28,28,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,28,28,-79,-7,28,28,-18,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,28,-42,-8,-9,-39,-34,-31,-23,-61,-63,28,-64,28,-70,-69,28,-18,28,-86,-87,28,-96,-93,-12,-5,28,-73,28,-72,-19,-66,-65,-67,-47,28,28,143,-15,-13,-14,-4,28,150,-89,-48,-45,-43,-6,-74,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,28,28,28,28,-17,28,-97,-93,-94,150,-75,28,28,28,28,-83,28,-16,-98,-95,-90,28,-77,28,28,28,28,28,-76,28,28,-84,28,-78,28,-85,]),';':([0,2,3,4,5,6,7,8,9,10,11,12,14,16,17,19,22,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,47,50,51,52,53,54,55,56,58,59,60,65,66,67,68,70,73,76,77,78,79,80,96,97,98,99,100,101,102,109,110,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,140,142,144,145,146,147,151,152,153,154,156,157,158,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,],[29,29,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,29,29,-79,-7,29,29,-18,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,29,-42,-8,-9,-39,-34,-31,-23,-61,-63,29,-64,29,-70,-69,29,-18,29,-86,-87,29,-96,-93,-12,-5,29,-73,29,-72,-19,-66,-65,-67,-47,29,29,-4,29,-48,-45,-43,-6,-74,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,29,29,29,29,-17,29,-97,-93,-94,-75,29,29,29,29,-83,29,-98,-95,29,-77,29,29,29,29,29,-76,29,29,-84,29,-78,29,-85,]),'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,14,16,17,19,22,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,47,50,51,52,53,54,55,56,58,59,60,65,66,67,68,70,73,76,77,78,79,80,96,97,98,99,100,101,102,109,110,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,140,142,144,145,146,147,151,152,153,154,156,157,158,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,],[30,30,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,30,30,-79,-7,30,30,-18,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,30,-42,-8,-9,-39,-34,-31,-23,-61,-63,30,-64,30,-70,-69,30,-18,30,-86,-87,30,-96,-93,-12,-5,30,-73,30,-72,-19,-66,-65,-67,-47,30,30,-4,30,-48,-45,-43,-6,-74,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,30,30,30,30,-17,30,-97,-93,-94,-75,30,30,30,30,-83,30,-98,-95,30,-77,30,30,30,30,30,-76,30,30,-84,30,-78,30,-85,]),'(':([0,2,3,4,5,6,7,8,9,10,11,12,14,18,19,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,63,65,66,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,109,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,140,141,142,143,144,146,151,152,154,155,156,157,158,161,165,166,167,168,170,171,173,174,175,176,178,],[23,23,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,23,-79,23,62,63,23,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,23,-42,-8,-9,-39,-34,-31,-20,-21,-23,23,-22,-61,-63,-70,-69,23,23,-18,23,23,-86,-87,112,23,-12,23,23,-5,23,-73,-71,-72,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-19,-66,-67,-47,23,23,23,-4,23,-45,-43,-6,-74,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,23,23,23,23,-17,23,23,112,-75,23,23,23,23,-83,23,-98,-77,23,23,23,23,-76,23,-84,23,-78,-85,]),'[':([0,2,3,4,5,6,7,8,9,10,11,12,14,18,19,20,22,23,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,109,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,140,141,142,143,144,151,152,154,155,156,157,158,161,165,166,167,168,170,171,173,174,175,176,178,],[38,38,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,38,-79,38,-7,38,71,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,38,-42,-8,-9,-39,-34,-31,-20,-21,-23,38,-22,-61,-63,-70,-69,38,38,-18,38,38,-86,-87,38,-12,38,38,-5,38,-73,-71,-72,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-19,-66,-67,-47,38,38,38,-4,38,-45,-43,-6,-74,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,38,38,38,38,-17,38,38,-75,38,38,38,38,-83,38,-98,-77,38,38,38,38,-76,38,-84,38,-78,-85,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,65,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,109,110,111,112,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,140,141,142,143,144,150,151,152,154,155,156,157,158,161,165,166,167,168,170,171,173,174,175,176,178,],[22,22,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,53,-68,53,22,-79,22,61,-7,22,70,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,22,-42,-8,-9,-39,-34,-31,-20,-21,-23,22,-22,-61,-63,98,-64,98,-70,-69,22,22,-18,22,104,22,-86,-87,114,22,-12,22,22,-5,22,-73,-71,-72,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-19,-66,-65,-67,-47,22,22,22,-4,22,146,114,-45,-43,-6,-74,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,22,22,22,22,-17,22,22,163,-75,22,22,22,22,-83,22,-98,-77,22,22,22,22,-76,22,-84,22,-78,-85,]),'CONSTANT':([0,2,3,4,5,6,7,8,9,10,11,12,14,18,19,20,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,109,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,140,141,142,143,144,151,152,154,155,156,157,158,161,165,166,167,168,170,171,173,174,175,176,178,],[40,40,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,40,-79,40,-7,40,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,40,-42,-8,-9,-39,-34,-31,-20,-21,-23,40,-22,-61,-63,-70,-69,40,40,-18,40,40,-86,-87,40,-12,40,40,-5,40,-73,-71,-72,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-19,-66,-67,-47,40,40,40,-4,40,-45,-43,-6,-74,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,40,40,40,40,-17,40,40,-75,40,40,40,40,-83,40,-98,-77,40,40,40,40,-76,40,-84,40,-78,-85,]),'STRING_LITERAL':([0,2,3,4,5,6,7,8,9,10,11,12,14,18,19,20,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,109,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,140,141,142,143,144,151,152,154,155,156,157,158,161,165,166,167,168,170,171,173,174,175,176,178,],[41,41,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,41,-79,41,-7,41,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,41,-42,-8,-9,-39,-34,-31,-20,-21,-23,41,-22,-61,-63,-70,-69,41,41,-18,41,41,-86,-87,41,-12,41,41,-5,41,-73,-71,-72,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-19,-66,-67,-47,41,41,41,-4,41,-45,-43,-6,-74,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,41,41,41,41,-17,41,41,-75,41,41,41,41,-83,41,-98,-77,41,41,41,41,-76,41,-84,41,-78,-85,]),'+':([0,2,3,4,5,6,7,8,9,10,11,12,14,18,19,20,22,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,47,50,51,55,56,57,58,59,60,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,109,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,140,141,142,143,144,151,152,154,155,156,157,158,161,165,166,167,168,170,171,173,174,175,176,178,],[45,45,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,45,-79,45,-7,45,-18,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,45,-42,-8,-9,-39,87,-31,-23,-61,-63,-70,-69,45,45,-18,45,45,-86,-87,45,-12,45,45,-5,45,-73,-71,-72,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-19,-66,-67,-47,45,45,45,-4,45,-45,-43,-6,-74,-40,-41,87,87,87,87,-32,-33,-24,-25,-26,-27,-28,-29,-30,45,45,45,45,-17,45,45,-75,45,45,45,45,-83,45,-98,-77,45,45,45,45,-76,45,-84,45,-78,-85,]),'-':([0,2,3,4,5,6,7,8,9,10,11,12,14,18,19,20,22,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,47,50,51,55,56,57,58,59,60,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,109,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,140,141,142,143,144,151,152,154,155,156,157,158,161,165,166,167,168,170,171,173,174,175,176,178,],[46,46,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,46,-79,46,-7,46,-18,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,46,-42,-8,-9,-39,88,-31,-23,-61,-63,-70,-69,46,46,-18,46,46,-86,-87,46,-12,46,46,-5,46,-73,-71,-72,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-19,-66,-67,-47,46,46,46,-4,46,-45,-43,-6,-74,-40,-41,88,88,88,88,-32,-33,-24,-25,-26,-27,-28,-29,-30,46,46,46,46,-17,46,46,-75,46,46,46,46,-83,46,-98,-77,46,46,46,46,-76,46,-84,46,-78,-85,]),'~':([0,2,3,4,5,6,7,8,9,10,11,12,14,18,19,20,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,47,50,51,55,56,57,58,59,60,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,109,110,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,140,141,142,143,144,151,152,154,155,156,157,158,161,165,166,167,168,170,171,173,174,175,176,178,],[49,49,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,49,-79,49,-7,49,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,49,-42,-8,-9,-39,-34,-31,-23,-61,-63,-70,-69,49,49,-18,49,49,-86,-87,49,-12,49,49,-5,49,-73,-71,-72,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-19,-66,-67,-47,49,49,49,-4,49,-45,-43,-6,-74,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,49,49,49,49,-17,49,49,-75,49,49,49,49,-83,49,-98,-77,49,49,49,49,-76,49,-84,49,-78,-85,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,14,19,28,29,30,50,51,55,56,65,66,97,99,101,151,157,161,165,171,174,176,178,],[0,-88,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,-79,-49,-50,-51,-61,-63,-70,-69,-86,-87,-66,-67,-80,-75,-83,-98,-77,-76,-84,-78,-85,]),'error':([2,3,4,5,6,7,8,9,10,11,12,14,19,28,29,30,50,51,55,56,65,66,97,99,101,102,144,151,152,157,158,161,165,166,168,171,173,174,175,176,178,],[51,-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,-79,-49,-50,-51,-61,-63,-70,-69,-86,-87,-66,-67,51,51,51,-75,51,-83,51,-98,-77,51,51,-76,51,-84,51,-78,-85,]),'END':([3,4,5,6,7,8,9,10,11,12,14,19,28,29,30,50,51,55,56,65,66,97,99,101,102,137,144,151,152,157,158,161,165,166,168,171,173,174,175,176,178,],[-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,-79,-49,-50,-51,-61,-63,-70,-69,-86,-87,-66,-67,135,139,153,161,-75,164,-83,169,-98,-77,172,-81,-76,-82,-84,177,-78,-85,]),'ELSE':([3,4,5,6,7,8,9,10,11,12,14,19,28,29,30,50,51,55,56,65,66,97,99,101,137,151,157,161,165,168,171,173,174,176,178,],[-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,-79,-49,-50,-51,-61,-63,-70,-69,-86,-87,-66,-67,136,154,-75,-83,-98,-77,-81,-76,-82,-84,-78,-85,]),'ELSEIF':([3,4,5,6,7,8,9,10,11,12,14,19,28,29,30,50,51,55,56,65,66,97,99,101,137,151,157,161,165,168,171,173,174,176,178,],[-60,-62,-52,-53,-54,-55,-56,-57,-58,-59,-68,-79,-49,-50,-51,-61,-63,-70,-69,-86,-87,-66,-67,138,155,-75,-83,-98,-77,-81,-76,-82,-84,-78,-85,]),']':([14,22,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,47,56,59,73,76,77,78,79,80,96,100,109,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,163,],[-68,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,76,-42,-8,-9,-39,-34,-31,-23,-69,-18,-12,-5,118,-73,-71,-72,-19,-47,-4,149,-89,-45,-43,-6,-74,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,-90,]),':':([17,22,27,31,32,33,34,35,36,37,39,40,41,42,43,44,47,58,59,60,63,64,73,76,79,96,100,108,109,115,116,117,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,140,142,143,156,159,167,],[57,-7,-18,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,57,-18,57,107,57,-12,-5,57,-19,-47,57,-4,57,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,57,-17,107,57,57,57,]),'=':([22,27,32,33,35,36,37,40,41,61,69,70,73,76,104,109,118,142,149,],[-7,72,-10,-11,-1,-2,-3,-8,-9,103,111,-91,-12,-5,141,-4,-6,-17,-92,]),'TRANSPOSE':([22,27,32,33,35,36,37,40,41,59,73,76,96,109,118,142,],[-7,73,-10,-11,-1,-2,-3,-8,-9,73,-12,-5,73,-4,-6,-17,]),'*':([22,27,32,33,35,36,37,40,41,44,47,59,73,76,96,109,118,126,127,128,129,130,131,132,133,134,142,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,89,-23,-18,-12,-5,-19,-4,-6,89,89,-24,-25,-26,-27,-28,-29,-30,-17,]),'/':([22,27,32,33,35,36,37,40,41,44,47,59,73,76,96,109,118,126,127,128,129,130,131,132,133,134,142,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,90,-23,-18,-12,-5,-19,-4,-6,90,90,-24,-25,-26,-27,-28,-29,-30,-17,]),'^':([22,27,32,33,35,36,37,40,41,44,47,59,73,76,96,109,118,126,127,128,129,130,131,132,133,134,142,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,91,-23,-18,-12,-5,-19,-4,-6,91,91,-24,-25,-26,-27,-28,-29,-30,-17,]),'ARRAY_MUL':([22,27,32,33,35,36,37,40,41,44,47,59,73,76,96,109,118,126,127,128,129,130,131,132,133,134,142,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,92,-23,-18,-12,-5,-19,-4,-6,92,92,-24,-25,-26,-27,-28,-29,-30,-17,]),'ARRAY_DIV':([22,27,32,33,35,36,37,40,41,44,47,59,73,76,96,109,118,126,127,128,129,130,131,132,133,134,142,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,93,-23,-18,-12,-5,-19,-4,-6,93,93,-24,-25,-26,-27,-28,-29,-30,-17,]),'ARRAY_RDIV':([22,27,32,33,35,36,37,40,41,44,47,59,73,76,96,109,118,126,127,128,129,130,131,132,133,134,142,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,94,-23,-18,-12,-5,-19,-4,-6,94,94,-24,-25,-26,-27,-28,-29,-30,-17,]),'ARRAY_POW':([22,27,32,33,35,36,37,40,41,44,47,59,73,76,96,109,118,126,127,128,129,130,131,132,133,134,142,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,95,-23,-18,-12,-5,-19,-4,-6,95,95,-24,-25,-26,-27,-28,-29,-30,-17,]),'<':([22,27,32,33,35,36,37,40,41,42,43,44,47,59,73,76,96,109,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,83,-34,-31,-23,-18,-12,-5,-19,-4,-6,83,83,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'>':([22,27,32,33,35,36,37,40,41,42,43,44,47,59,73,76,96,109,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,84,-34,-31,-23,-18,-12,-5,-19,-4,-6,84,84,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'LE_OP':([22,27,32,33,35,36,37,40,41,42,43,44,47,59,73,76,96,109,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,85,-34,-31,-23,-18,-12,-5,-19,-4,-6,85,85,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'GE_OP':([22,27,32,33,35,36,37,40,41,42,43,44,47,59,73,76,96,109,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,86,-34,-31,-23,-18,-12,-5,-19,-4,-6,86,86,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'EQ_OP':([22,27,32,33,35,36,37,39,40,41,42,43,44,47,59,73,76,96,109,117,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,],[-7,-18,-10,-11,-1,-2,-3,81,-8,-9,-39,-34,-31,-23,-18,-12,-5,-19,-4,81,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'NE_OP':([22,27,32,33,35,36,37,39,40,41,42,43,44,47,59,73,76,96,109,117,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,],[-7,-18,-10,-11,-1,-2,-3,82,-8,-9,-39,-34,-31,-23,-18,-12,-5,-19,-4,82,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'&':([22,27,32,33,34,35,36,37,39,40,41,42,43,44,47,59,73,76,96,109,116,117,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,],[-7,-18,-10,-11,75,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-18,-12,-5,-19,-4,75,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'|':([22,27,31,32,33,34,35,36,37,39,40,41,42,43,44,47,59,73,76,96,100,109,116,117,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,],[-7,-18,74,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-18,-12,-5,-19,74,-4,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),')':([22,31,32,33,34,35,36,37,39,40,41,42,43,44,47,59,64,73,76,96,100,105,106,107,108,109,112,114,116,117,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,148,159,160,163,],[-7,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-18,109,-12,-5,-19,-47,142,-15,-13,-14,-4,147,-89,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,162,170,-16,-90,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'statement_list':([0,58,60,110,136,140,154,156,167,170,],[2,101,102,144,152,158,166,168,173,175,]),'statement':([0,2,58,60,101,102,110,136,140,144,152,154,156,158,166,167,168,170,173,175,],[3,50,3,3,50,50,3,3,3,50,50,3,3,50,50,3,50,3,50,50,]),'statement_list_error':([0,58,60,110,136,140,154,156,167,170,],[4,4,4,4,4,4,4,4,4,4,]),'global_statement':([0,2,58,60,101,102,110,136,140,144,152,154,156,158,166,167,168,170,173,175,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'clear_statement':([0,2,58,60,101,102,110,136,140,144,152,154,156,158,166,167,168,170,173,175,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'assignment_statement':([0,2,58,60,101,102,110,136,140,144,152,154,156,158,166,167,168,170,173,175,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'expression_statement':([0,2,38,58,60,77,101,102,110,136,140,144,152,154,156,158,166,167,168,170,173,175,],[8,8,80,8,8,80,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'selection_statement':([0,2,58,60,101,102,110,136,140,144,152,154,156,158,166,167,168,170,173,175,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'iteration_statement':([0,2,58,60,101,102,110,136,140,144,152,154,156,158,166,167,168,170,173,175,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'jump_statement':([0,2,58,60,101,102,110,136,140,144,152,154,156,158,166,167,168,170,173,175,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'func_statement':([0,2,58,60,101,102,110,136,140,144,152,154,156,158,166,167,168,170,173,175,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'eostmt':([0,2,16,17,24,25,38,52,54,58,60,67,77,79,101,102,110,135,136,139,140,144,152,153,154,156,158,164,166,167,168,169,170,172,173,175,177,],[14,14,55,56,65,66,14,97,99,14,14,110,14,56,14,14,14,151,14,157,14,14,14,165,14,14,14,171,14,14,14,174,14,176,14,14,178,]),'assignment_expression':([0,2,58,60,101,102,110,136,140,144,152,154,156,158,166,167,168,170,173,175,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'expression':([0,2,18,20,23,38,58,60,63,72,77,101,102,103,110,136,138,140,141,143,144,152,154,155,156,158,166,167,168,170,173,175,],[17,17,58,60,64,79,17,17,108,115,79,17,17,140,17,17,156,17,159,108,17,17,17,167,17,17,17,17,17,17,17,17,]),'selection_statement_invoke_error':([0,2,58,60,101,102,110,136,140,144,152,154,156,158,166,167,168,170,173,175,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'postfix_expression':([0,2,18,20,23,38,48,57,58,60,63,72,74,75,77,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,101,102,103,110,136,138,140,141,143,144,152,154,155,156,158,166,167,168,170,173,175,],[27,27,59,59,59,59,96,59,27,27,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,27,27,59,27,27,59,27,59,59,27,27,27,59,27,27,27,27,27,27,27,27,]),'or_expression':([0,2,18,20,23,38,57,58,60,63,72,77,101,102,103,110,136,138,140,141,143,144,152,154,155,156,158,166,167,168,170,173,175,],[31,31,31,31,31,31,100,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'primary_expression':([0,2,18,20,23,38,48,57,58,60,63,72,74,75,77,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,101,102,103,110,136,138,140,141,143,144,152,154,155,156,158,166,167,168,170,173,175,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'array_expression':([0,2,18,20,23,38,48,57,58,60,63,72,74,75,77,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,101,102,103,110,136,138,140,141,143,144,152,154,155,156,158,166,167,168,170,173,175,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'and_expression':([0,2,18,20,23,38,57,58,60,63,72,74,77,101,102,103,110,136,138,140,141,143,144,152,154,155,156,158,166,167,168,170,173,175,],[34,34,34,34,34,34,34,34,34,34,34,116,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'identifier_expression':([0,2,18,20,23,38,48,57,58,60,63,72,74,75,77,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,101,102,103,110,136,138,140,141,143,144,152,154,155,156,158,166,167,168,170,173,175,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'constant_expression':([0,2,18,20,23,38,48,57,58,60,63,72,74,75,77,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,101,102,103,110,136,138,140,141,143,144,152,154,155,156,158,166,167,168,170,173,175,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'string_literal_expression':([0,2,18,20,23,38,48,57,58,60,63,72,74,75,77,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,101,102,103,110,136,138,140,141,143,144,152,154,155,156,158,166,167,168,170,173,175,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'equality_expression':([0,2,18,20,23,38,57,58,60,63,72,74,75,77,101,102,103,110,136,138,140,141,143,144,152,154,155,156,158,166,167,168,170,173,175,],[39,39,39,39,39,39,39,39,39,39,39,39,117,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'relational_expression':([0,2,18,20,23,38,57,58,60,63,72,74,75,77,81,82,101,102,103,110,136,138,140,141,143,144,152,154,155,156,158,166,167,168,170,173,175,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,120,121,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'additive_expression':([0,2,18,20,23,38,57,58,60,63,72,74,75,77,81,82,83,84,85,86,101,102,103,110,136,138,140,141,143,144,152,154,155,156,158,166,167,168,170,173,175,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,122,123,124,125,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'multiplicative_expression':([0,2,18,20,23,38,57,58,60,63,72,74,75,77,81,82,83,84,85,86,87,88,101,102,103,110,136,138,140,141,143,144,152,154,155,156,158,166,167,168,170,173,175,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,126,127,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'unary_expression':([0,2,18,20,23,38,57,58,60,63,72,74,75,77,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,101,102,103,110,136,138,140,141,143,144,152,154,155,156,158,166,167,168,170,173,175,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,128,129,130,131,132,133,134,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'unary_operator':([0,2,18,20,23,38,57,58,60,63,72,74,75,77,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,101,102,103,110,136,138,140,141,143,144,152,154,155,156,158,166,167,168,170,173,175,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'identifier_list':([13,15,],[52,54,]),'func_declare':([26,],[67,]),'func_declare_lhs':([26,111,],[68,145,]),'func_return_list':([26,],[69,]),'array_list':([38,],[77,]),'array_element':([38,77,],[78,119,]),'index_expression_list':([63,],[105,]),'index_expression':([63,143,],[106,160,]),'func_identifier_list':([71,112,],[113,148,]),'elseif_clause':([101,],[137,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('primary_expression -> identifier_expression','primary_expression',1,'p_primary_expression','parser.py',90),
  ('primary_expression -> constant_expression','primary_expression',1,'p_primary_expression','parser.py',91),
  ('primary_expression -> string_literal_expression','primary_expression',1,'p_primary_expression','parser.py',92),
  ('primary_expression -> ( expression )','primary_expression',3,'p_primary_expression','parser.py',93),
  ('primary_expression -> [ ]','primary_expression',2,'p_primary_expression','parser.py',94),
  ('primary_expression -> [ array_list ]','primary_expression',3,'p_primary_expression','parser.py',95),
  ('identifier_expression -> IDENTIFIER','identifier_expression',1,'p_identifier_expression','parser.py',109),
  ('constant_expression -> CONSTANT','constant_expression',1,'p_constant_expression','parser.py',115),
  ('string_literal_expression -> STRING_LITERAL','string_literal_expression',1,'p_string_literal_expression','parser.py',121),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser.py',127),
  ('postfix_expression -> array_expression','postfix_expression',1,'p_postfix_expression','parser.py',128),
  ('postfix_expression -> postfix_expression TRANSPOSE','postfix_expression',2,'p_postfix_expression','parser.py',129),
  ('index_expression -> :','index_expression',1,'p_index_expression','parser.py',135),
  ('index_expression -> expression','index_expression',1,'p_index_expression','parser.py',136),
  ('index_expression_list -> index_expression','index_expression_list',1,'p_index_expression_list','parser.py',142),
  ('index_expression_list -> index_expression_list , index_expression','index_expression_list',3,'p_index_expression_list','parser.py',143),
  ('array_expression -> IDENTIFIER ( index_expression_list )','array_expression',4,'p_array_expression','parser.py',149),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',155),
  ('unary_expression -> unary_operator postfix_expression','unary_expression',2,'p_unary_expression','parser.py',156),
  ('unary_operator -> +','unary_operator',1,'p_unary_operator','parser.py',162),
  ('unary_operator -> -','unary_operator',1,'p_unary_operator','parser.py',163),
  ('unary_operator -> ~','unary_operator',1,'p_unary_operator','parser.py',164),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','parser.py',170),
  ('multiplicative_expression -> multiplicative_expression * unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',171),
  ('multiplicative_expression -> multiplicative_expression / unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',172),
  ('multiplicative_expression -> multiplicative_expression ^ unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',173),
  ('multiplicative_expression -> multiplicative_expression ARRAY_MUL unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',174),
  ('multiplicative_expression -> multiplicative_expression ARRAY_DIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',175),
  ('multiplicative_expression -> multiplicative_expression ARRAY_RDIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',176),
  ('multiplicative_expression -> multiplicative_expression ARRAY_POW unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',177),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','parser.py',183),
  ('additive_expression -> additive_expression + multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',184),
  ('additive_expression -> additive_expression - multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',185),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression','parser.py',191),
  ('relational_expression -> relational_expression < additive_expression','relational_expression',3,'p_relational_expression','parser.py',192),
  ('relational_expression -> relational_expression > additive_expression','relational_expression',3,'p_relational_expression','parser.py',193),
  ('relational_expression -> relational_expression LE_OP additive_expression','relational_expression',3,'p_relational_expression','parser.py',194),
  ('relational_expression -> relational_expression GE_OP additive_expression','relational_expression',3,'p_relational_expression','parser.py',195),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','parser.py',201),
  ('equality_expression -> equality_expression EQ_OP relational_expression','equality_expression',3,'p_equality_expression','parser.py',202),
  ('equality_expression -> equality_expression NE_OP relational_expression','equality_expression',3,'p_equality_expression','parser.py',203),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','parser.py',209),
  ('and_expression -> and_expression & equality_expression','and_expression',3,'p_and_expression','parser.py',210),
  ('or_expression -> and_expression','or_expression',1,'p_or_expression','parser.py',216),
  ('or_expression -> or_expression | and_expression','or_expression',3,'p_or_expression','parser.py',217),
  ('expression -> or_expression','expression',1,'p_expression','parser.py',223),
  ('expression -> expression : or_expression','expression',3,'p_expression','parser.py',224),
  ('assignment_expression -> postfix_expression = expression','assignment_expression',3,'p_assignment_expression','parser.py',230),
  ('eostmt -> ,','eostmt',1,'p_eostmt','parser.py',236),
  ('eostmt -> ;','eostmt',1,'p_eostmt','parser.py',237),
  ('eostmt -> NEWLINE','eostmt',1,'p_eostmt','parser.py',238),
  ('statement -> global_statement','statement',1,'p_statement','parser.py',244),
  ('statement -> clear_statement','statement',1,'p_statement','parser.py',245),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',246),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',247),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',248),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',249),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',250),
  ('statement -> func_statement','statement',1,'p_statement','parser.py',251),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',257),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',258),
  ('statement_list -> statement_list_error','statement_list',1,'p_statement_list','parser.py',259),
  ('statement_list_error -> statement_list error','statement_list_error',2,'p_statement_list_error','parser.py',265),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','parser.py',277),
  ('identifier_list -> identifier_list IDENTIFIER','identifier_list',2,'p_identifier_list','parser.py',278),
  ('global_statement -> GLOBAL identifier_list eostmt','global_statement',3,'p_global_statement','parser.py',284),
  ('clear_statement -> CLEAR identifier_list eostmt','clear_statement',3,'p_clear_statement','parser.py',290),
  ('expression_statement -> eostmt','expression_statement',1,'p_expression_statement','parser.py',296),
  ('expression_statement -> expression eostmt','expression_statement',2,'p_expression_statement','parser.py',297),
  ('assignment_statement -> assignment_expression eostmt','assignment_statement',2,'p_assignment_statement','parser.py',303),
  ('array_element -> expression','array_element',1,'p_array_element','parser.py',309),
  ('array_element -> expression_statement','array_element',1,'p_array_element','parser.py',310),
  ('array_list -> array_element','array_list',1,'p_array_list','parser.py',316),
  ('array_list -> array_list array_element','array_list',2,'p_array_list','parser.py',317),
  ('selection_statement -> IF expression statement_list END eostmt','selection_statement',5,'p_selection_statement','parser.py',329),
  ('selection_statement -> IF expression statement_list ELSE statement_list END eostmt','selection_statement',7,'p_selection_statement','parser.py',330),
  ('selection_statement -> IF expression statement_list elseif_clause END eostmt','selection_statement',6,'p_selection_statement','parser.py',331),
  ('selection_statement -> IF expression statement_list elseif_clause ELSE statement_list END eostmt','selection_statement',8,'p_selection_statement','parser.py',332),
  ('selection_statement -> selection_statement_invoke_error','selection_statement',1,'p_selection_statement','parser.py',333),
  ('selection_statement_invoke_error -> IF expression statement_list','selection_statement_invoke_error',3,'p_selection_statement_invoke_error','parser.py',346),
  ('elseif_clause -> ELSEIF expression statement_list','elseif_clause',3,'p_elseif_clause','parser.py',352),
  ('elseif_clause -> elseif_clause ELSEIF expression statement_list','elseif_clause',4,'p_elseif_clause','parser.py',353),
  ('iteration_statement -> WHILE expression statement_list END eostmt','iteration_statement',5,'p_iteration_statement','parser.py',362),
  ('iteration_statement -> FOR IDENTIFIER = expression statement_list END eostmt','iteration_statement',7,'p_iteration_statement','parser.py',363),
  ('iteration_statement -> FOR ( IDENTIFIER = expression ) statement_list END eostmt','iteration_statement',9,'p_iteration_statement','parser.py',364),
  ('jump_statement -> BREAK eostmt','jump_statement',2,'p_jump_statement','parser.py',376),
  ('jump_statement -> RETURN eostmt','jump_statement',2,'p_jump_statement','parser.py',377),
  ('translation_unit -> statement_list','translation_unit',1,'p_translation_unit','parser.py',386),
  ('func_identifier_list -> IDENTIFIER','func_identifier_list',1,'p_func_identifier_list','parser.py',392),
  ('func_identifier_list -> func_identifier_list , IDENTIFIER','func_identifier_list',3,'p_func_identifier_list','parser.py',393),
  ('func_return_list -> IDENTIFIER','func_return_list',1,'p_func_return_list','parser.py',402),
  ('func_return_list -> [ func_identifier_list ]','func_return_list',3,'p_func_return_list','parser.py',403),
  ('func_declare_lhs -> IDENTIFIER','func_declare_lhs',1,'p_func_declare_lhs','parser.py',412),
  ('func_declare_lhs -> IDENTIFIER ( )','func_declare_lhs',3,'p_func_declare_lhs','parser.py',413),
  ('func_declare_lhs -> IDENTIFIER ( func_identifier_list )','func_declare_lhs',4,'p_func_declare_lhs','parser.py',414),
  ('func_declare -> func_declare_lhs','func_declare',1,'p_func_declare','parser.py',423),
  ('func_declare -> func_return_list = func_declare_lhs','func_declare',3,'p_func_declare','parser.py',424),
  ('func_statement -> FUNCTION func_declare eostmt statement_list END','func_statement',5,'p_func_statement','parser.py',433),
]
