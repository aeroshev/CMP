
# cmp_parse_tab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "translation_unitARRAY_DIV ARRAY_MUL ARRAY_POW ARRAY_RDIV BREAK CLEAR COMMENTS CONSTANT ELSE ELSEIF END EQ_OP FOR FUNCTION GE_OP GLOBAL IDENTIFIER IF LE_OP NEWLINE NE_OP RETURN STRING_LITERAL TRANSPOSE WHILE WHITESPACE\n        primary_expression : IDENTIFIER\n                           | CONSTANT\n                           | STRING_LITERAL\n                           | '(' expression ')'\n                           | '[' ']'\n                           | '[' array_list ']'\n        \n        postfix_expression : primary_expression\n                           | array_expression\n                           | postfix_expression TRANSPOSE\n        \n        index_expression : ':'\n                         | expression\n        \n        index_expression_list : index_expression\n                              | index_expression_list ',' index_expression\n        \n        array_expression : IDENTIFIER '(' index_expression_list ')'\n        \n        unary_expression : postfix_expression\n                         | unary_operator postfix_expression\n        \n        unary_operator : '+'\n                       | '-'\n                       | '~'\n        \n        multiplicative_expression : unary_expression\n                                  | multiplicative_expression '*' unary_expression\n                                  | multiplicative_expression '/' unary_expression\n                                  | multiplicative_expression '^' unary_expression\n                                  | multiplicative_expression ARRAY_MUL unary_expression\n                                  | multiplicative_expression ARRAY_DIV unary_expression\n                                  | multiplicative_expression ARRAY_RDIV unary_expression\n                                  | multiplicative_expression ARRAY_POW unary_expression\n        \n        additive_expression : multiplicative_expression\n                            | additive_expression '+' multiplicative_expression\n                            | additive_expression '-' multiplicative_expression\n        \n        relational_expression : additive_expression\n                              | relational_expression '<' additive_expression\n                              | relational_expression '>' additive_expression\n                              | relational_expression LE_OP additive_expression\n                              | relational_expression GE_OP additive_expression\n        \n        equality_expression : relational_expression\n                            | equality_expression EQ_OP relational_expression\n                            | equality_expression NE_OP relational_expression\n        \n        and_expression : equality_expression\n                       | and_expression '&' equality_expression\n        \n        or_expression : and_expression\n                      | or_expression '|' and_expression\n        \n        expression : or_expression\n                   | expression ':' or_expression\n        \n        assignment_expression : postfix_expression '=' expression\n        \n        eostmt : ','\n               | ';'\n               | NEWLINE\n        \n        statement : global_statement\n                  | clear_statement\n                  | assignment_statement\n                  | expression_statement\n                  | selection_statement\n                  | iteration_statement\n                  | jump_statement\n        \n        statement_list : statement\n                       | statement_list statement\n        \n        identifier_list : IDENTIFIER\n                        | identifier_list IDENTIFIER\n        \n        global_statement : GLOBAL identifier_list eostmt\n        \n        clear_statement : CLEAR identifier_list eostmt\n        \n        expression_statement : eostmt\n                             | expression eostmt\n        \n        assignment_statement : assignment_expression eostmt\n        \n        array_element : expression\n                      | expression_statement\n        \n        array_list : array_element\n                   | array_list array_element\n        \n        selection_statement : IF expression statement_list END eostmt\n                            | IF expression statement_list ELSE statement_list END eostmt\n                            | IF expression statement_list elseif_clause END eostmt\n                            | IF expression statement_list elseif_clause ELSE statement_list END eostmt\n        \n        elseif_clause : ELSEIF expression statement_list\n                      | elseif_clause ELSEIF expression statement_list\n        \n        iteration_statement : WHILE expression statement_list END eostmt\n                            | FOR IDENTIFIER '=' expression statement_list END eostmt\n                            | FOR '(' IDENTIFIER '=' expression ')' statement_list END eostmt\n        \n        jump_statement : BREAK eostmt\n                       | RETURN eostmt\n        \n        translation_unit : statement_list\n                         | FUNCTION func_declare eostmt statement_list\n        \n        func_identifier_list : IDENTIFIER\n                             | func_identifier_list ',' IDENTIFIER\n        \n        func_return_list : IDENTIFIER\n                         | '[' func_identifier_list ']'\n        \n        func_declare_lhs : IDENTIFIER\n                         | IDENTIFIER '(' ')'\n                         | IDENTIFIER '(' func_identifier_list ')'\n        \n        func_declare : func_declare_lhs\n                     | func_return_list '=' func_declare_lhs\n        "
    
_lr_action_items = {'FUNCTION':([0,],[3,]),'GLOBAL':([0,2,4,5,6,7,8,9,10,11,12,20,25,26,27,28,29,30,31,32,33,35,36,37,38,41,44,53,54,56,57,58,63,64,66,69,89,90,95,97,98,99,100,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,140,142,146,147,149,151,152,153,157,158,159,160,162,163,165,166,167,168,170,],[13,13,-62,-56,-49,-50,-51,-52,-53,-54,-55,-1,-46,-47,-48,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-57,-64,-63,13,-15,13,-78,-79,-9,-5,-16,13,-60,-61,-44,13,13,-4,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,13,13,13,-14,-69,13,13,13,-75,13,-71,13,13,13,13,-70,13,-76,13,-72,-77,]),'CLEAR':([0,2,4,5,6,7,8,9,10,11,12,20,25,26,27,28,29,30,31,32,33,35,36,37,38,41,44,53,54,56,57,58,63,64,66,69,89,90,95,97,98,99,100,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,140,142,146,147,149,151,152,153,157,158,159,160,162,163,165,166,167,168,170,],[14,14,-62,-56,-49,-50,-51,-52,-53,-54,-55,-1,-46,-47,-48,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-57,-64,-63,14,-15,14,-78,-79,-9,-5,-16,14,-60,-61,-44,14,14,-4,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,14,14,14,-14,-69,14,14,14,-75,14,-71,14,14,14,14,-70,14,-76,14,-72,-77,]),'IF':([0,2,4,5,6,7,8,9,10,11,12,20,25,26,27,28,29,30,31,32,33,35,36,37,38,41,44,53,54,56,57,58,63,64,66,69,89,90,95,97,98,99,100,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,140,142,146,147,149,151,152,153,157,158,159,160,162,163,165,166,167,168,170,],[17,17,-62,-56,-49,-50,-51,-52,-53,-54,-55,-1,-46,-47,-48,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-57,-64,-63,17,-15,17,-78,-79,-9,-5,-16,17,-60,-61,-44,17,17,-4,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,17,17,17,-14,-69,17,17,17,-75,17,-71,17,17,17,17,-70,17,-76,17,-72,-77,]),'WHILE':([0,2,4,5,6,7,8,9,10,11,12,20,25,26,27,28,29,30,31,32,33,35,36,37,38,41,44,53,54,56,57,58,63,64,66,69,89,90,95,97,98,99,100,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,140,142,146,147,149,151,152,153,157,158,159,160,162,163,165,166,167,168,170,],[18,18,-62,-56,-49,-50,-51,-52,-53,-54,-55,-1,-46,-47,-48,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-57,-64,-63,18,-15,18,-78,-79,-9,-5,-16,18,-60,-61,-44,18,18,-4,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,18,18,18,-14,-69,18,18,18,-75,18,-71,18,18,18,18,-70,18,-76,18,-72,-77,]),'FOR':([0,2,4,5,6,7,8,9,10,11,12,20,25,26,27,28,29,30,31,32,33,35,36,37,38,41,44,53,54,56,57,58,63,64,66,69,89,90,95,97,98,99,100,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,140,142,146,147,149,151,152,153,157,158,159,160,162,163,165,166,167,168,170,],[19,19,-62,-56,-49,-50,-51,-52,-53,-54,-55,-1,-46,-47,-48,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-57,-64,-63,19,-15,19,-78,-79,-9,-5,-16,19,-60,-61,-44,19,19,-4,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,19,19,19,-14,-69,19,19,19,-75,19,-71,19,19,19,19,-70,19,-76,19,-72,-77,]),'BREAK':([0,2,4,5,6,7,8,9,10,11,12,20,25,26,27,28,29,30,31,32,33,35,36,37,38,41,44,53,54,56,57,58,63,64,66,69,89,90,95,97,98,99,100,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,140,142,146,147,149,151,152,153,157,158,159,160,162,163,165,166,167,168,170,],[22,22,-62,-56,-49,-50,-51,-52,-53,-54,-55,-1,-46,-47,-48,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-57,-64,-63,22,-15,22,-78,-79,-9,-5,-16,22,-60,-61,-44,22,22,-4,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,22,22,22,-14,-69,22,22,22,-75,22,-71,22,22,22,22,-70,22,-76,22,-72,-77,]),'RETURN':([0,2,4,5,6,7,8,9,10,11,12,20,25,26,27,28,29,30,31,32,33,35,36,37,38,41,44,53,54,56,57,58,63,64,66,69,89,90,95,97,98,99,100,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,140,142,146,147,149,151,152,153,157,158,159,160,162,163,165,166,167,168,170,],[23,23,-62,-56,-49,-50,-51,-52,-53,-54,-55,-1,-46,-47,-48,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-57,-64,-63,23,-15,23,-78,-79,-9,-5,-16,23,-60,-61,-44,23,23,-4,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,23,23,23,-14,-69,23,23,23,-75,23,-71,23,23,23,23,-70,23,-76,23,-72,-77,]),',':([0,2,4,5,6,7,8,9,10,11,12,15,16,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,41,44,45,46,48,50,51,52,53,54,56,57,58,63,64,66,69,70,71,72,73,89,90,93,94,95,96,97,98,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,135,136,139,140,142,144,145,146,147,148,149,151,152,153,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,],[25,25,-62,-56,-49,-50,-51,-52,-53,-54,-55,25,25,-1,25,25,-15,-46,-47,-48,-43,-7,-8,-41,-2,-3,25,-39,-36,-31,-28,-20,-57,25,-89,-86,25,-58,25,-64,-63,25,-15,25,-78,-79,-9,-5,25,-67,25,-66,-16,25,134,-82,-60,-59,-61,-44,25,25,143,-12,-10,-11,-4,-45,-42,-40,-6,-68,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,25,-90,-86,-87,134,25,25,25,25,-14,-88,-83,-69,25,25,25,25,-75,25,-13,25,-71,25,25,25,25,25,-70,25,25,-76,25,-72,25,-77,]),';':([0,2,4,5,6,7,8,9,10,11,12,15,16,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,41,44,45,46,48,50,51,52,53,54,56,57,58,63,64,66,69,70,71,72,73,89,90,95,96,97,98,99,100,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,139,140,142,144,146,147,148,149,151,152,153,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,],[26,26,-62,-56,-49,-50,-51,-52,-53,-54,-55,26,26,-1,26,26,-15,-46,-47,-48,-43,-7,-8,-41,-2,-3,26,-39,-36,-31,-28,-20,-57,26,-89,-86,26,-58,26,-64,-63,26,-15,26,-78,-79,-9,-5,26,-67,26,-66,-16,26,-60,-59,-61,-44,26,26,-4,-45,-42,-40,-6,-68,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,26,-90,-86,-87,26,26,26,26,-14,-88,-69,26,26,26,26,-75,26,26,-71,26,26,26,26,26,-70,26,26,-76,26,-72,26,-77,]),'NEWLINE':([0,2,4,5,6,7,8,9,10,11,12,15,16,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,41,44,45,46,48,50,51,52,53,54,56,57,58,63,64,66,69,70,71,72,73,89,90,95,96,97,98,99,100,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,139,140,142,144,146,147,148,149,151,152,153,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,],[27,27,-62,-56,-49,-50,-51,-52,-53,-54,-55,27,27,-1,27,27,-15,-46,-47,-48,-43,-7,-8,-41,-2,-3,27,-39,-36,-31,-28,-20,-57,27,-89,-86,27,-58,27,-64,-63,27,-15,27,-78,-79,-9,-5,27,-67,27,-66,-16,27,-60,-59,-61,-44,27,27,-4,-45,-42,-40,-6,-68,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,27,-90,-86,-87,27,27,27,27,-14,-88,-69,27,27,27,27,-75,27,27,-71,27,27,27,27,27,-70,27,27,-76,27,-72,27,-77,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,49,50,51,52,53,54,55,56,57,58,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95,96,97,98,99,100,101,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,134,136,138,140,141,142,143,146,147,149,150,151,152,153,157,158,159,160,162,163,165,166,167,168,170,],[20,20,48,-62,-56,-49,-50,-51,-52,-53,-54,-55,51,51,20,20,59,-1,20,-46,-47,-48,-43,-7,-8,-41,-2,-3,20,-39,-36,-31,-28,-17,-18,-20,20,-19,-57,94,96,-58,96,-64,-63,20,20,-15,20,102,20,-78,-79,20,-9,20,20,-5,20,-67,-65,-66,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-16,20,130,94,-60,-59,-61,-44,20,20,20,-4,-42,-40,-6,-68,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,20,145,20,20,20,20,-14,20,-69,20,20,20,20,-75,20,-71,20,20,20,20,-70,20,-76,20,-72,-77,]),'CONSTANT':([0,2,4,5,6,7,8,9,10,11,12,17,18,20,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,53,54,55,56,57,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,97,98,99,100,101,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,138,140,141,142,143,146,147,149,150,151,152,153,157,158,159,160,162,163,165,166,167,168,170,],[32,32,-62,-56,-49,-50,-51,-52,-53,-54,-55,32,32,-1,32,-46,-47,-48,-43,-7,-8,-41,-2,-3,32,-39,-36,-31,-28,-17,-18,-20,32,-19,-57,-64,-63,32,32,-15,32,32,-78,-79,32,-9,32,32,-5,32,-67,-65,-66,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-16,32,-60,-61,-44,32,32,32,-4,-42,-40,-6,-68,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,32,32,32,32,32,-14,32,-69,32,32,32,32,-75,32,-71,32,32,32,32,-70,32,-76,32,-72,-77,]),'STRING_LITERAL':([0,2,4,5,6,7,8,9,10,11,12,17,18,20,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,53,54,55,56,57,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,97,98,99,100,101,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,138,140,141,142,143,146,147,149,150,151,152,153,157,158,159,160,162,163,165,166,167,168,170,],[33,33,-62,-56,-49,-50,-51,-52,-53,-54,-55,33,33,-1,33,-46,-47,-48,-43,-7,-8,-41,-2,-3,33,-39,-36,-31,-28,-17,-18,-20,33,-19,-57,-64,-63,33,33,-15,33,33,-78,-79,33,-9,33,33,-5,33,-67,-65,-66,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-16,33,-60,-61,-44,33,33,33,-4,-42,-40,-6,-68,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,33,33,33,33,33,-14,33,-69,33,33,33,33,-75,33,-71,33,33,33,33,-70,33,-76,33,-72,-77,]),'(':([0,2,4,5,6,7,8,9,10,11,12,17,18,19,20,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,48,53,54,55,56,57,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,97,98,99,100,101,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,136,138,140,141,142,143,146,147,149,150,151,152,153,157,158,159,160,162,163,165,166,167,168,170,],[21,21,-62,-56,-49,-50,-51,-52,-53,-54,-55,21,21,60,61,21,-46,-47,-48,-43,-7,-8,-41,-2,-3,21,-39,-36,-31,-28,-17,-18,-20,21,-19,-57,92,-64,-63,21,21,-15,21,21,-78,-79,21,-9,21,21,-5,21,-67,-65,-66,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-16,21,-60,-61,-44,21,21,21,-4,-42,-40,-6,-68,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,21,92,21,21,21,21,-14,21,-69,21,21,21,21,-75,21,-71,21,21,21,21,-70,21,-76,21,-72,-77,]),'[':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,20,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,53,54,55,56,57,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,97,98,99,100,101,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,138,140,141,142,143,146,147,149,150,151,152,153,157,158,159,160,162,163,165,166,167,168,170,],[34,34,49,-62,-56,-49,-50,-51,-52,-53,-54,-55,34,34,-1,34,-46,-47,-48,-43,-7,-8,-41,-2,-3,34,-39,-36,-31,-28,-17,-18,-20,34,-19,-57,-64,-63,34,34,-15,34,34,-78,-79,34,-9,34,34,-5,34,-67,-65,-66,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-16,34,-60,-61,-44,34,34,34,-4,-42,-40,-6,-68,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,34,34,34,34,34,-14,34,-69,34,34,34,34,-75,34,-71,34,34,34,34,-70,34,-76,34,-72,-77,]),'+':([0,2,4,5,6,7,8,9,10,11,12,17,18,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,41,44,53,54,55,56,57,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,97,98,99,100,101,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,138,140,141,142,143,146,147,149,150,151,152,153,157,158,159,160,162,163,165,166,167,168,170,],[39,39,-62,-56,-49,-50,-51,-52,-53,-54,-55,39,39,-1,39,-15,-46,-47,-48,-43,-7,-8,-41,-2,-3,39,-39,-36,80,-28,-20,-57,-64,-63,39,39,-15,39,39,-78,-79,39,-9,39,39,-5,39,-67,-65,-66,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-16,39,-60,-61,-44,39,39,39,-4,-42,-40,-6,-68,-37,-38,80,80,80,80,-29,-30,-21,-22,-23,-24,-25,-26,-27,39,39,39,39,39,-14,39,-69,39,39,39,39,-75,39,-71,39,39,39,39,-70,39,-76,39,-72,-77,]),'-':([0,2,4,5,6,7,8,9,10,11,12,17,18,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,41,44,53,54,55,56,57,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,97,98,99,100,101,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,138,140,141,142,143,146,147,149,150,151,152,153,157,158,159,160,162,163,165,166,167,168,170,],[40,40,-62,-56,-49,-50,-51,-52,-53,-54,-55,40,40,-1,40,-15,-46,-47,-48,-43,-7,-8,-41,-2,-3,40,-39,-36,81,-28,-20,-57,-64,-63,40,40,-15,40,40,-78,-79,40,-9,40,40,-5,40,-67,-65,-66,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-16,40,-60,-61,-44,40,40,40,-4,-42,-40,-6,-68,-37,-38,81,81,81,81,-29,-30,-21,-22,-23,-24,-25,-26,-27,40,40,40,40,40,-14,40,-69,40,40,40,40,-75,40,-71,40,40,40,40,-70,40,-76,40,-72,-77,]),'~':([0,2,4,5,6,7,8,9,10,11,12,17,18,20,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,41,44,53,54,55,56,57,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,97,98,99,100,101,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,138,140,141,142,143,146,147,149,150,151,152,153,157,158,159,160,162,163,165,166,167,168,170,],[43,43,-62,-56,-49,-50,-51,-52,-53,-54,-55,43,43,-1,43,-46,-47,-48,-43,-7,-8,-41,-2,-3,43,-39,-36,-31,-28,-20,-57,-64,-63,43,43,-15,43,43,-78,-79,43,-9,43,43,-5,43,-67,-65,-66,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-16,43,-60,-61,-44,43,43,43,-4,-42,-40,-6,-68,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,43,43,43,43,43,-14,43,-69,43,43,43,43,-75,43,-71,43,43,43,43,-70,43,-76,43,-72,-77,]),'$end':([1,2,4,5,6,7,8,9,10,11,12,25,26,27,44,53,54,63,64,95,97,128,146,152,157,163,166,168,170,],[0,-80,-62,-56,-49,-50,-51,-52,-53,-54,-55,-46,-47,-48,-57,-64,-63,-78,-79,-60,-61,-81,-69,-75,-71,-70,-76,-72,-77,]),']':([4,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,41,54,57,66,69,70,71,72,73,89,93,94,98,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,142,145,],[-62,-1,-46,-47,-48,-43,-7,-8,-41,-2,-3,69,-39,-36,-31,-28,-20,-63,-15,-9,-5,111,-67,-65,-66,-16,133,-82,-44,-4,-42,-40,-6,-68,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,-83,]),'END':([4,5,6,7,8,9,10,11,12,25,26,27,44,53,54,63,64,95,97,99,100,137,146,147,152,153,157,158,160,163,165,166,167,168,170,],[-62,-56,-49,-50,-51,-52,-53,-54,-55,-46,-47,-48,-57,-64,-63,-78,-79,-60,-61,135,139,148,-69,156,-75,161,-71,164,-73,-70,-74,-76,169,-72,-77,]),'ELSE':([4,5,6,7,8,9,10,11,12,25,26,27,44,53,54,63,64,95,97,99,137,146,152,157,160,163,165,166,168,170,],[-62,-56,-49,-50,-51,-52,-53,-54,-55,-46,-47,-48,-57,-64,-63,-78,-79,-60,-61,136,149,-69,-75,-71,-73,-70,-74,-76,-72,-77,]),'ELSEIF':([4,5,6,7,8,9,10,11,12,25,26,27,44,53,54,63,64,95,97,99,137,146,152,157,160,163,165,166,168,170,],[-62,-56,-49,-50,-51,-52,-53,-54,-55,-46,-47,-48,-57,-64,-63,-78,-79,-60,-61,138,150,-69,-75,-71,-73,-70,-74,-76,-72,-77,]),':':([16,20,24,28,29,30,31,32,33,35,36,37,38,41,56,57,58,61,62,66,69,72,89,98,106,107,108,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,140,142,143,151,154,159,],[55,-1,-15,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,55,-15,55,105,55,-9,-5,55,-16,-44,55,-4,55,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,55,-14,105,55,55,55,]),'=':([20,24,29,30,32,33,47,48,59,66,69,102,107,111,133,142,],[-1,65,-7,-8,-2,-3,91,-84,101,-9,-5,141,-4,-6,-85,-14,]),'TRANSPOSE':([20,24,29,30,32,33,57,66,69,89,107,111,142,],[-1,66,-7,-8,-2,-3,66,-9,-5,66,-4,-6,-14,]),'*':([20,24,29,30,32,33,38,41,57,66,69,89,107,111,119,120,121,122,123,124,125,126,127,142,],[-1,-15,-7,-8,-2,-3,82,-20,-15,-9,-5,-16,-4,-6,82,82,-21,-22,-23,-24,-25,-26,-27,-14,]),'/':([20,24,29,30,32,33,38,41,57,66,69,89,107,111,119,120,121,122,123,124,125,126,127,142,],[-1,-15,-7,-8,-2,-3,83,-20,-15,-9,-5,-16,-4,-6,83,83,-21,-22,-23,-24,-25,-26,-27,-14,]),'^':([20,24,29,30,32,33,38,41,57,66,69,89,107,111,119,120,121,122,123,124,125,126,127,142,],[-1,-15,-7,-8,-2,-3,84,-20,-15,-9,-5,-16,-4,-6,84,84,-21,-22,-23,-24,-25,-26,-27,-14,]),'ARRAY_MUL':([20,24,29,30,32,33,38,41,57,66,69,89,107,111,119,120,121,122,123,124,125,126,127,142,],[-1,-15,-7,-8,-2,-3,85,-20,-15,-9,-5,-16,-4,-6,85,85,-21,-22,-23,-24,-25,-26,-27,-14,]),'ARRAY_DIV':([20,24,29,30,32,33,38,41,57,66,69,89,107,111,119,120,121,122,123,124,125,126,127,142,],[-1,-15,-7,-8,-2,-3,86,-20,-15,-9,-5,-16,-4,-6,86,86,-21,-22,-23,-24,-25,-26,-27,-14,]),'ARRAY_RDIV':([20,24,29,30,32,33,38,41,57,66,69,89,107,111,119,120,121,122,123,124,125,126,127,142,],[-1,-15,-7,-8,-2,-3,87,-20,-15,-9,-5,-16,-4,-6,87,87,-21,-22,-23,-24,-25,-26,-27,-14,]),'ARRAY_POW':([20,24,29,30,32,33,38,41,57,66,69,89,107,111,119,120,121,122,123,124,125,126,127,142,],[-1,-15,-7,-8,-2,-3,88,-20,-15,-9,-5,-16,-4,-6,88,88,-21,-22,-23,-24,-25,-26,-27,-14,]),'<':([20,24,29,30,32,33,36,37,38,41,57,66,69,89,107,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,142,],[-1,-15,-7,-8,-2,-3,76,-31,-28,-20,-15,-9,-5,-16,-4,-6,76,76,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,]),'>':([20,24,29,30,32,33,36,37,38,41,57,66,69,89,107,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,142,],[-1,-15,-7,-8,-2,-3,77,-31,-28,-20,-15,-9,-5,-16,-4,-6,77,77,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,]),'LE_OP':([20,24,29,30,32,33,36,37,38,41,57,66,69,89,107,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,142,],[-1,-15,-7,-8,-2,-3,78,-31,-28,-20,-15,-9,-5,-16,-4,-6,78,78,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,]),'GE_OP':([20,24,29,30,32,33,36,37,38,41,57,66,69,89,107,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,142,],[-1,-15,-7,-8,-2,-3,79,-31,-28,-20,-15,-9,-5,-16,-4,-6,79,79,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,]),'EQ_OP':([20,24,29,30,32,33,35,36,37,38,41,57,66,69,89,107,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,142,],[-1,-15,-7,-8,-2,-3,74,-36,-31,-28,-20,-15,-9,-5,-16,-4,74,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,]),'NE_OP':([20,24,29,30,32,33,35,36,37,38,41,57,66,69,89,107,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,142,],[-1,-15,-7,-8,-2,-3,75,-36,-31,-28,-20,-15,-9,-5,-16,-4,75,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,]),'&':([20,24,29,30,31,32,33,35,36,37,38,41,57,66,69,89,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,142,],[-1,-15,-7,-8,68,-2,-3,-39,-36,-31,-28,-20,-15,-9,-5,-16,-4,68,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,]),'|':([20,24,28,29,30,31,32,33,35,36,37,38,41,57,66,69,89,98,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,142,],[-1,-15,67,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-15,-9,-5,-16,67,-4,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,-14,]),')':([20,28,29,30,31,32,33,35,36,37,38,41,57,62,66,69,89,92,94,98,103,104,105,106,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,132,142,145,154,155,],[-1,-43,-7,-8,-41,-2,-3,-39,-36,-31,-28,-20,-15,107,-9,-5,-16,131,-82,-44,142,-12,-10,-11,-4,-42,-40,-6,-37,-38,-32,-33,-34,-35,-29,-30,-21,-22,-23,-24,-25,-26,-27,144,-14,-83,162,-13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'statement_list':([0,56,58,90,136,140,149,151,159,162,],[2,99,100,128,147,153,158,160,165,167,]),'eostmt':([0,2,15,16,22,23,34,45,50,52,56,58,70,72,90,99,100,128,135,136,139,140,147,148,149,151,153,156,158,159,160,161,162,164,165,167,169,],[4,4,53,54,63,64,4,90,95,97,4,4,4,54,4,4,4,4,146,4,152,4,4,157,4,4,4,163,4,4,4,166,4,168,4,4,170,]),'statement':([0,2,56,58,90,99,100,128,136,140,147,149,151,153,158,159,160,162,165,167,],[5,44,5,5,5,44,44,44,5,5,44,5,5,44,44,5,44,5,44,44,]),'global_statement':([0,2,56,58,90,99,100,128,136,140,147,149,151,153,158,159,160,162,165,167,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'clear_statement':([0,2,56,58,90,99,100,128,136,140,147,149,151,153,158,159,160,162,165,167,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'assignment_statement':([0,2,56,58,90,99,100,128,136,140,147,149,151,153,158,159,160,162,165,167,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'expression_statement':([0,2,34,56,58,70,90,99,100,128,136,140,147,149,151,153,158,159,160,162,165,167,],[9,9,73,9,9,73,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'selection_statement':([0,2,56,58,90,99,100,128,136,140,147,149,151,153,158,159,160,162,165,167,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'iteration_statement':([0,2,56,58,90,99,100,128,136,140,147,149,151,153,158,159,160,162,165,167,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'jump_statement':([0,2,56,58,90,99,100,128,136,140,147,149,151,153,158,159,160,162,165,167,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'assignment_expression':([0,2,56,58,90,99,100,128,136,140,147,149,151,153,158,159,160,162,165,167,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'expression':([0,2,17,18,21,34,56,58,61,65,70,90,99,100,101,128,136,138,140,141,143,147,149,150,151,153,158,159,160,162,165,167,],[16,16,56,58,62,72,16,16,106,108,72,16,16,16,140,16,16,151,16,154,106,16,16,159,16,16,16,16,16,16,16,16,]),'postfix_expression':([0,2,17,18,21,34,42,55,56,58,61,65,67,68,70,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,99,100,101,128,136,138,140,141,143,147,149,150,151,153,158,159,160,162,165,167,],[24,24,57,57,57,57,89,57,24,24,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,24,24,24,57,24,24,57,24,57,57,24,24,57,24,24,24,24,24,24,24,24,]),'or_expression':([0,2,17,18,21,34,55,56,58,61,65,70,90,99,100,101,128,136,138,140,141,143,147,149,150,151,153,158,159,160,162,165,167,],[28,28,28,28,28,28,98,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'primary_expression':([0,2,17,18,21,34,42,55,56,58,61,65,67,68,70,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,99,100,101,128,136,138,140,141,143,147,149,150,151,153,158,159,160,162,165,167,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'array_expression':([0,2,17,18,21,34,42,55,56,58,61,65,67,68,70,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,99,100,101,128,136,138,140,141,143,147,149,150,151,153,158,159,160,162,165,167,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'and_expression':([0,2,17,18,21,34,55,56,58,61,65,67,70,90,99,100,101,128,136,138,140,141,143,147,149,150,151,153,158,159,160,162,165,167,],[31,31,31,31,31,31,31,31,31,31,31,109,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'equality_expression':([0,2,17,18,21,34,55,56,58,61,65,67,68,70,90,99,100,101,128,136,138,140,141,143,147,149,150,151,153,158,159,160,162,165,167,],[35,35,35,35,35,35,35,35,35,35,35,35,110,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'relational_expression':([0,2,17,18,21,34,55,56,58,61,65,67,68,70,74,75,90,99,100,101,128,136,138,140,141,143,147,149,150,151,153,158,159,160,162,165,167,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,113,114,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'additive_expression':([0,2,17,18,21,34,55,56,58,61,65,67,68,70,74,75,76,77,78,79,90,99,100,101,128,136,138,140,141,143,147,149,150,151,153,158,159,160,162,165,167,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,115,116,117,118,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'multiplicative_expression':([0,2,17,18,21,34,55,56,58,61,65,67,68,70,74,75,76,77,78,79,80,81,90,99,100,101,128,136,138,140,141,143,147,149,150,151,153,158,159,160,162,165,167,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,119,120,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'unary_expression':([0,2,17,18,21,34,55,56,58,61,65,67,68,70,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,99,100,101,128,136,138,140,141,143,147,149,150,151,153,158,159,160,162,165,167,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,121,122,123,124,125,126,127,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'unary_operator':([0,2,17,18,21,34,55,56,58,61,65,67,68,70,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,99,100,101,128,136,138,140,141,143,147,149,150,151,153,158,159,160,162,165,167,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'func_declare':([3,],[45,]),'func_declare_lhs':([3,91,],[46,129,]),'func_return_list':([3,],[47,]),'identifier_list':([13,14,],[50,52,]),'array_list':([34,],[70,]),'array_element':([34,70,],[71,112,]),'func_identifier_list':([49,92,],[93,132,]),'index_expression_list':([61,],[103,]),'index_expression':([61,143,],[104,155,]),'elseif_clause':([99,],[137,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','parser.py',79),
  ('primary_expression -> CONSTANT','primary_expression',1,'p_primary_expression','parser.py',80),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','parser.py',81),
  ('primary_expression -> ( expression )','primary_expression',3,'p_primary_expression','parser.py',82),
  ('primary_expression -> [ ]','primary_expression',2,'p_primary_expression','parser.py',83),
  ('primary_expression -> [ array_list ]','primary_expression',3,'p_primary_expression','parser.py',84),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser.py',98),
  ('postfix_expression -> array_expression','postfix_expression',1,'p_postfix_expression','parser.py',99),
  ('postfix_expression -> postfix_expression TRANSPOSE','postfix_expression',2,'p_postfix_expression','parser.py',100),
  ('index_expression -> :','index_expression',1,'p_index_expression','parser.py',106),
  ('index_expression -> expression','index_expression',1,'p_index_expression','parser.py',107),
  ('index_expression_list -> index_expression','index_expression_list',1,'p_index_expression_list','parser.py',113),
  ('index_expression_list -> index_expression_list , index_expression','index_expression_list',3,'p_index_expression_list','parser.py',114),
  ('array_expression -> IDENTIFIER ( index_expression_list )','array_expression',4,'p_array_expression','parser.py',120),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',126),
  ('unary_expression -> unary_operator postfix_expression','unary_expression',2,'p_unary_expression','parser.py',127),
  ('unary_operator -> +','unary_operator',1,'p_unary_operator','parser.py',133),
  ('unary_operator -> -','unary_operator',1,'p_unary_operator','parser.py',134),
  ('unary_operator -> ~','unary_operator',1,'p_unary_operator','parser.py',135),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','parser.py',140),
  ('multiplicative_expression -> multiplicative_expression * unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',141),
  ('multiplicative_expression -> multiplicative_expression / unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',142),
  ('multiplicative_expression -> multiplicative_expression ^ unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',143),
  ('multiplicative_expression -> multiplicative_expression ARRAY_MUL unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',144),
  ('multiplicative_expression -> multiplicative_expression ARRAY_DIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',145),
  ('multiplicative_expression -> multiplicative_expression ARRAY_RDIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',146),
  ('multiplicative_expression -> multiplicative_expression ARRAY_POW unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',147),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','parser.py',153),
  ('additive_expression -> additive_expression + multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',154),
  ('additive_expression -> additive_expression - multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',155),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression','parser.py',161),
  ('relational_expression -> relational_expression < additive_expression','relational_expression',3,'p_relational_expression','parser.py',162),
  ('relational_expression -> relational_expression > additive_expression','relational_expression',3,'p_relational_expression','parser.py',163),
  ('relational_expression -> relational_expression LE_OP additive_expression','relational_expression',3,'p_relational_expression','parser.py',164),
  ('relational_expression -> relational_expression GE_OP additive_expression','relational_expression',3,'p_relational_expression','parser.py',165),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','parser.py',171),
  ('equality_expression -> equality_expression EQ_OP relational_expression','equality_expression',3,'p_equality_expression','parser.py',172),
  ('equality_expression -> equality_expression NE_OP relational_expression','equality_expression',3,'p_equality_expression','parser.py',173),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','parser.py',179),
  ('and_expression -> and_expression & equality_expression','and_expression',3,'p_and_expression','parser.py',180),
  ('or_expression -> and_expression','or_expression',1,'p_or_expression','parser.py',186),
  ('or_expression -> or_expression | and_expression','or_expression',3,'p_or_expression','parser.py',187),
  ('expression -> or_expression','expression',1,'p_expression','parser.py',193),
  ('expression -> expression : or_expression','expression',3,'p_expression','parser.py',194),
  ('assignment_expression -> postfix_expression = expression','assignment_expression',3,'p_assignment_expression','parser.py',200),
  ('eostmt -> ,','eostmt',1,'p_eostmt','parser.py',206),
  ('eostmt -> ;','eostmt',1,'p_eostmt','parser.py',207),
  ('eostmt -> NEWLINE','eostmt',1,'p_eostmt','parser.py',208),
  ('statement -> global_statement','statement',1,'p_statement','parser.py',214),
  ('statement -> clear_statement','statement',1,'p_statement','parser.py',215),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',216),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',217),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',218),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',219),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',220),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',226),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',227),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','parser.py',233),
  ('identifier_list -> identifier_list IDENTIFIER','identifier_list',2,'p_identifier_list','parser.py',234),
  ('global_statement -> GLOBAL identifier_list eostmt','global_statement',3,'p_global_statement','parser.py',240),
  ('clear_statement -> CLEAR identifier_list eostmt','clear_statement',3,'p_clear_statement','parser.py',246),
  ('expression_statement -> eostmt','expression_statement',1,'p_expression_statement','parser.py',252),
  ('expression_statement -> expression eostmt','expression_statement',2,'p_expression_statement','parser.py',253),
  ('assignment_statement -> assignment_expression eostmt','assignment_statement',2,'p_assignment_statement','parser.py',259),
  ('array_element -> expression','array_element',1,'p_array_element','parser.py',265),
  ('array_element -> expression_statement','array_element',1,'p_array_element','parser.py',266),
  ('array_list -> array_element','array_list',1,'p_array_list','parser.py',272),
  ('array_list -> array_list array_element','array_list',2,'p_array_list','parser.py',273),
  ('selection_statement -> IF expression statement_list END eostmt','selection_statement',5,'p_selection_statement','parser.py',279),
  ('selection_statement -> IF expression statement_list ELSE statement_list END eostmt','selection_statement',7,'p_selection_statement','parser.py',280),
  ('selection_statement -> IF expression statement_list elseif_clause END eostmt','selection_statement',6,'p_selection_statement','parser.py',281),
  ('selection_statement -> IF expression statement_list elseif_clause ELSE statement_list END eostmt','selection_statement',8,'p_selection_statement','parser.py',282),
  ('elseif_clause -> ELSEIF expression statement_list','elseif_clause',3,'p_elseif_clause','parser.py',295),
  ('elseif_clause -> elseif_clause ELSEIF expression statement_list','elseif_clause',4,'p_elseif_clause','parser.py',296),
  ('iteration_statement -> WHILE expression statement_list END eostmt','iteration_statement',5,'p_iteration_statement','parser.py',301),
  ('iteration_statement -> FOR IDENTIFIER = expression statement_list END eostmt','iteration_statement',7,'p_iteration_statement','parser.py',302),
  ('iteration_statement -> FOR ( IDENTIFIER = expression ) statement_list END eostmt','iteration_statement',9,'p_iteration_statement','parser.py',303),
  ('jump_statement -> BREAK eostmt','jump_statement',2,'p_jump_statement','parser.py',308),
  ('jump_statement -> RETURN eostmt','jump_statement',2,'p_jump_statement','parser.py',309),
  ('translation_unit -> statement_list','translation_unit',1,'p_translation_unit','parser.py',314),
  ('translation_unit -> FUNCTION func_declare eostmt statement_list','translation_unit',4,'p_translation_unit','parser.py',315),
  ('func_identifier_list -> IDENTIFIER','func_identifier_list',1,'p_func_identifier_list','parser.py',321),
  ('func_identifier_list -> func_identifier_list , IDENTIFIER','func_identifier_list',3,'p_func_identifier_list','parser.py',322),
  ('func_return_list -> IDENTIFIER','func_return_list',1,'p_func_return_list','parser.py',331),
  ('func_return_list -> [ func_identifier_list ]','func_return_list',3,'p_func_return_list','parser.py',332),
  ('func_declare_lhs -> IDENTIFIER','func_declare_lhs',1,'p_func_declare_lhs','parser.py',337),
  ('func_declare_lhs -> IDENTIFIER ( )','func_declare_lhs',3,'p_func_declare_lhs','parser.py',338),
  ('func_declare_lhs -> IDENTIFIER ( func_identifier_list )','func_declare_lhs',4,'p_func_declare_lhs','parser.py',339),
  ('func_declare -> func_declare_lhs','func_declare',1,'p_func_declare','parser.py',344),
  ('func_declare -> func_return_list = func_declare_lhs','func_declare',3,'p_func_declare','parser.py',345),
]
